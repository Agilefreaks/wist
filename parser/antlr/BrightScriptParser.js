// Generated from BrightScript.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var BrightScriptListener = require('./BrightScriptListener').BrightScriptListener;
var BrightScriptVisitor = require('./BrightScriptVisitor').BrightScriptVisitor;

var grammarFileName = "BrightScript.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003f\u02c6\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0007\u0003k\n",
    "\u0003\f\u0003\u000e\u0003n\u000b\u0003\u0003\u0003\u0007\u0003q\n\u0003",
    "\f\u0003\u000e\u0003t\u000b\u0003\u0003\u0003\u0007\u0003w\n\u0003\f",
    "\u0003\u000e\u0003z\u000b\u0003\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0006\u0004\u0080\n\u0004\r\u0004\u000e\u0004\u0081\u0003",
    "\u0004\u0003\u0004\u0007\u0004\u0086\n\u0004\f\u0004\u000e\u0004\u0089",
    "\u000b\u0004\u0003\u0004\u0007\u0004\u008c\n\u0004\f\u0004\u000e\u0004",
    "\u008f\u000b\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u0093\n\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006\u0099\n",
    "\u0006\f\u0006\u000e\u0006\u009c\u000b\u0006\u0003\u0006\u0006\u0006",
    "\u009f\n\u0006\r\u0006\u000e\u0006\u00a0\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005",
    "\u0007\u00b1\n\u0007\u0003\b\u0003\b\u0007\b\u00b5\n\b\f\b\u000e\b\u00b8",
    "\u000b\b\u0003\b\u0003\b\u0003\b\u0005\b\u00bd\n\b\u0003\b\u0003\b\u0005",
    "\b\u00c1\n\b\u0003\b\u0007\b\u00c4\n\b\f\b\u000e\b\u00c7\u000b\b\u0003",
    "\b\u0003\b\u0003\b\u0005\b\u00cc\n\b\u0007\b\u00ce\n\b\f\b\u000e\b\u00d1",
    "\u000b\b\u0005\b\u00d3\n\b\u0003\b\u0007\b\u00d6\n\b\f\b\u000e\b\u00d9",
    "\u000b\b\u0003\b\u0003\b\u0003\t\u0003\t\u0007\t\u00df\n\t\f\t\u000e",
    "\t\u00e2\u000b\t\u0003\t\u0003\t\u0003\t\u0005\t\u00e7\n\t\u0003\t\u0007",
    "\t\u00ea\n\t\f\t\u000e\t\u00ed\u000b\t\u0003\t\u0007\t\u00f0\n\t\f\t",
    "\u000e\t\u00f3\u000b\t\u0005\t\u00f5\n\t\u0003\t\u0007\t\u00f8\n\t\f",
    "\t\u000e\t\u00fb\u000b\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0005",
    "\n\u0102\n\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0005\f\u0112\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0005\r\u011c\n\r\u0003\r\u0006\r\u011f\n\r\r\r\u000e",
    "\r\u0120\u0003\r\u0007\r\u0124\n\r\f\r\u000e\r\u0127\u000b\r\u0003\r",
    "\u0005\r\u012a\n\r\u0003\r\u0003\r\u0005\r\u012e\n\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0006\u000e\u0136",
    "\n\u000e\r\u000e\u000e\u000e\u0137\u0003\u000e\u0007\u000e\u013b\n\u000e",
    "\f\u000e\u000e\u000e\u013e\u000b\u000e\u0003\u000e\u0005\u000e\u0141",
    "\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0145\n\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010",
    "\u014d\n\u0010\f\u0010\u000e\u0010\u0150\u000b\u0010\u0003\u0010\u0005",
    "\u0010\u0153\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010",
    "\u0158\n\u0010\u0005\u0010\u015a\n\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u015f\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u0164\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005",
    "\u0012\u0169\n\u0012\u0003\u0012\u0005\u0012\u016c\n\u0012\u0003\u0012",
    "\u0007\u0012\u016f\n\u0012\f\u0012\u000e\u0012\u0172\u000b\u0012\u0003",
    "\u0012\u0007\u0012\u0175\n\u0012\f\u0012\u000e\u0012\u0178\u000b\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u017d\n\u0013\u0003",
    "\u0013\u0003\u0013\u0005\u0013\u0181\n\u0013\u0003\u0013\u0006\u0013",
    "\u0184\n\u0013\r\u0013\u000e\u0013\u0185\u0003\u0013\u0007\u0013\u0189",
    "\n\u0013\f\u0013\u000e\u0013\u018c\u000b\u0013\u0003\u0014\u0003\u0014",
    "\u0006\u0014\u0190\n\u0014\r\u0014\u000e\u0014\u0191\u0003\u0014\u0007",
    "\u0014\u0195\n\u0014\f\u0014\u000e\u0014\u0198\u000b\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01a5\n",
    "\u0018\u0003\u0018\u0007\u0018\u01a8\n\u0018\f\u0018\u000e\u0018\u01ab",
    "\u000b\u0018\u0003\u0018\u0005\u0018\u01ae\n\u0018\u0005\u0018\u01b0",
    "\n\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u01b4\n\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0006\u001b\u01bb\n",
    "\u001b\r\u001b\u000e\u001b\u01bc\u0003\u001b\u0007\u001b\u01c0\n\u001b",
    "\f\u001b\u000e\u001b\u01c3\u000b\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u01c8\n\u001b\u0003\u001c\u0003\u001c\u0005\u001c",
    "\u01cc\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u01d0\n\u001c\u0003",
    "\u001c\u0006\u001c\u01d3\n\u001c\r\u001c\u000e\u001c\u01d4\u0003\u001c",
    "\u0007\u001c\u01d8\n\u001c\f\u001c\u000e\u001c\u01db\u000b\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u01e0\n\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u01e5\n\u001d\u0003\u001d\u0003",
    "\u001d\u0005\u001d\u01e9\n\u001d\u0003\u001d\u0006\u001d\u01ec\n\u001d",
    "\r\u001d\u000e\u001d\u01ed\u0003\u001d\u0007\u001d\u01f1\n\u001d\f\u001d",
    "\u000e\u001d\u01f4\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005",
    "\u001d\u01f9\n\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u01fd\n\u001e",
    "\u0003\u001e\u0006\u001e\u0200\n\u001e\r\u001e\u000e\u001e\u0201\u0003",
    "\u001e\u0007\u001e\u0205\n\u001e\f\u001e\u000e\u001e\u0208\u000b\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u020d\n\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0212\n\u001f\u0003\u001f",
    "\u0006\u001f\u0215\n\u001f\r\u001f\u000e\u001f\u0216\u0003\u001f\u0007",
    "\u001f\u021a\n\u001f\f\u001f\u000e\u001f\u021d\u000b\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u0222\n\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0007 \u0228\n \f \u000e \u022b\u000b \u0005 \u022d\n \u0003",
    " \u0003 \u0003!\u0003!\u0005!\u0233\n!\u0003!\u0003!\u0005!\u0237\n",
    "!\u0003!\u0003!\u0005!\u023b\n!\u0003\"\u0003\"\u0003#\u0003#\u0003",
    "#\u0005#\u0242\n#\u0003#\u0003#\u0003#\u0003#\u0005#\u0248\n#\u0007",
    "#\u024a\n#\f#\u000e#\u024d\u000b#\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0005$\u0256\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0005$\u026b\n$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0005$\u0275\n$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0007$\u027d\n$\f$\u000e$\u0280\u000b$\u0003%\u0003%\u0003",
    "%\u0005%\u0285\n%\u0003%\u0003%\u0003&\u0003&\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0005\'\u0291\n\'\u0003(\u0003(\u0003(\u0003",
    "(\u0005(\u0297\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u029e\n",
    ")\u0003*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003-\u0003-\u0003.\u0003",
    ".\u0005.\u02aa\n.\u0003/\u0003/\u00030\u00030\u00031\u00031\u00032\u0003",
    "2\u00052\u02b4\n2\u00032\u00072\u02b7\n2\f2\u000e2\u02ba\u000b2\u0003",
    "3\u00033\u00053\u02be\n3\u00033\u00073\u02c1\n3\f3\u000e3\u02c4\u000b",
    "3\u00033\u0002\u0003F4\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "\u0002\u0010\u0004\u0002--EE\n\u0002\u0005\u0005\t\n\u0017\u0017\u0019",
    "\u0019  ))3399\u0003\u0002TU\u0004\u0002&&VX\u0003\u0002YZ\u0004\u0002",
    "RR[_\u0004\u0002\u0003\u0003++\u0004\u0002FFSS\u0003\u0002GH\u0004\u0002",
    "RR`f\u0007\u0002\u0007\u0007\u001a\u001c3355::\u0003\u0002=>\u0004\u0002",
    "\u0016\u001688\f\u0002\u0003\u0003\u0006\b\u000b\u0016\u0018\u001e\"",
    "#%%\'(*248:;\u0002\u0318\u0002f\u0003\u0002\u0002\u0002\u0004l\u0003",
    "\u0002\u0002\u0002\u0006}\u0003\u0002\u0002\u0002\b\u0092\u0003\u0002",
    "\u0002\u0002\n\u0094\u0003\u0002\u0002\u0002\f\u00b0\u0003\u0002\u0002",
    "\u0002\u000e\u00b2\u0003\u0002\u0002\u0002\u0010\u00dc\u0003\u0002\u0002",
    "\u0002\u0012\u0101\u0003\u0002\u0002\u0002\u0014\u0106\u0003\u0002\u0002",
    "\u0002\u0016\u0111\u0003\u0002\u0002\u0002\u0018\u0113\u0003\u0002\u0002",
    "\u0002\u001a\u012f\u0003\u0002\u0002\u0002\u001c\u0146\u0003\u0002\u0002",
    "\u0002\u001e\u0159\u0003\u0002\u0002\u0002 \u015b\u0003\u0002\u0002",
    "\u0002\"\u0165\u0003\u0002\u0002\u0002$\u017c\u0003\u0002\u0002\u0002",
    "&\u018d\u0003\u0002\u0002\u0002(\u0199\u0003\u0002\u0002\u0002*\u019c",
    "\u0003\u0002\u0002\u0002,\u019f\u0003\u0002\u0002\u0002.\u01a1\u0003",
    "\u0002\u0002\u00020\u01b1\u0003\u0002\u0002\u00022\u01b5\u0003\u0002",
    "\u0002\u00024\u01b7\u0003\u0002\u0002\u00026\u01c9\u0003\u0002\u0002",
    "\u00028\u01e1\u0003\u0002\u0002\u0002:\u01fa\u0003\u0002\u0002\u0002",
    "<\u020e\u0003\u0002\u0002\u0002>\u0223\u0003\u0002\u0002\u0002@\u0232",
    "\u0003\u0002\u0002\u0002B\u023c\u0003\u0002\u0002\u0002D\u0241\u0003",
    "\u0002\u0002\u0002F\u0255\u0003\u0002\u0002\u0002H\u0281\u0003\u0002",
    "\u0002\u0002J\u0288\u0003\u0002\u0002\u0002L\u0290\u0003\u0002\u0002",
    "\u0002N\u0296\u0003\u0002\u0002\u0002P\u029d\u0003\u0002\u0002\u0002",
    "R\u029f\u0003\u0002\u0002\u0002T\u02a1\u0003\u0002\u0002\u0002V\u02a3",
    "\u0003\u0002\u0002\u0002X\u02a5\u0003\u0002\u0002\u0002Z\u02a7\u0003",
    "\u0002\u0002\u0002\\\u02ab\u0003\u0002\u0002\u0002^\u02ad\u0003\u0002",
    "\u0002\u0002`\u02af\u0003\u0002\u0002\u0002b\u02b3\u0003\u0002\u0002",
    "\u0002d\u02bd\u0003\u0002\u0002\u0002fg\u0005\u0004\u0003\u0002gh\u0007",
    "\u0002\u0002\u0003h\u0003\u0003\u0002\u0002\u0002ik\u0005b2\u0002ji",
    "\u0003\u0002\u0002\u0002kn\u0003\u0002\u0002\u0002lj\u0003\u0002\u0002",
    "\u0002lm\u0003\u0002\u0002\u0002mr\u0003\u0002\u0002\u0002nl\u0003\u0002",
    "\u0002\u0002oq\u0005*\u0016\u0002po\u0003\u0002\u0002\u0002qt\u0003",
    "\u0002\u0002\u0002rp\u0003\u0002\u0002\u0002rs\u0003\u0002\u0002\u0002",
    "sx\u0003\u0002\u0002\u0002tr\u0003\u0002\u0002\u0002uw\u0005b2\u0002",
    "vu\u0003\u0002\u0002\u0002wz\u0003\u0002\u0002\u0002xv\u0003\u0002\u0002",
    "\u0002xy\u0003\u0002\u0002\u0002y{\u0003\u0002\u0002\u0002zx\u0003\u0002",
    "\u0002\u0002{|\u0005\u0006\u0004\u0002|\u0005\u0003\u0002\u0002\u0002",
    "}\u0087\u0005\b\u0005\u0002~\u0080\u0005b2\u0002\u007f~\u0003\u0002",
    "\u0002\u0002\u0080\u0081\u0003\u0002\u0002\u0002\u0081\u007f\u0003\u0002",
    "\u0002\u0002\u0081\u0082\u0003\u0002\u0002\u0002\u0082\u0083\u0003\u0002",
    "\u0002\u0002\u0083\u0084\u0005\b\u0005\u0002\u0084\u0086\u0003\u0002",
    "\u0002\u0002\u0085\u007f\u0003\u0002\u0002\u0002\u0086\u0089\u0003\u0002",
    "\u0002\u0002\u0087\u0085\u0003\u0002\u0002\u0002\u0087\u0088\u0003\u0002",
    "\u0002\u0002\u0088\u008d\u0003\u0002\u0002\u0002\u0089\u0087\u0003\u0002",
    "\u0002\u0002\u008a\u008c\u0005b2\u0002\u008b\u008a\u0003\u0002\u0002",
    "\u0002\u008c\u008f\u0003\u0002\u0002\u0002\u008d\u008b\u0003\u0002\u0002",
    "\u0002\u008d\u008e\u0003\u0002\u0002\u0002\u008e\u0007\u0003\u0002\u0002",
    "\u0002\u008f\u008d\u0003\u0002\u0002\u0002\u0090\u0093\u00058\u001d",
    "\u0002\u0091\u0093\u0005<\u001f\u0002\u0092\u0090\u0003\u0002\u0002",
    "\u0002\u0092\u0091\u0003\u0002\u0002\u0002\u0093\t\u0003\u0002\u0002",
    "\u0002\u0094\u009a\u0005\f\u0007\u0002\u0095\u0096\u0005d3\u0002\u0096",
    "\u0097\u0005\f\u0007\u0002\u0097\u0099\u0003\u0002\u0002\u0002\u0098",
    "\u0095\u0003\u0002\u0002\u0002\u0099\u009c\u0003\u0002\u0002\u0002\u009a",
    "\u0098\u0003\u0002\u0002\u0002\u009a\u009b\u0003\u0002\u0002\u0002\u009b",
    "\u009e\u0003\u0002\u0002\u0002\u009c\u009a\u0003\u0002\u0002\u0002\u009d",
    "\u009f\u0005d3\u0002\u009e\u009d\u0003\u0002\u0002\u0002\u009f\u00a0",
    "\u0003\u0002\u0002\u0002\u00a0\u009e\u0003\u0002\u0002\u0002\u00a0\u00a1",
    "\u0003\u0002\u0002\u0002\u00a1\u000b\u0003\u0002\u0002\u0002\u00a2\u00b1",
    "\u0005`1\u0002\u00a3\u00b1\u0005\u0014\u000b\u0002\u00a4\u00b1\u0005",
    "\u0016\f\u0002\u00a5\u00b1\u0005\u0018\r\u0002\u00a6\u00b1\u0005\u001a",
    "\u000e\u0002\u00a7\u00b1\u0005\u001e\u0010\u0002\u00a8\u00b1\u0005\u001c",
    "\u000f\u0002\u00a9\u00b1\u0005(\u0015\u0002\u00aa\u00b1\u0005,\u0017",
    "\u0002\u00ab\u00b1\u0005.\u0018\u0002\u00ac\u00b1\u00050\u0019\u0002",
    "\u00ad\u00b1\u00052\u001a\u0002\u00ae\u00b1\u00054\u001b\u0002\u00af",
    "\u00b1\u0005F$\u0002\u00b0\u00a2\u0003\u0002\u0002\u0002\u00b0\u00a3",
    "\u0003\u0002\u0002\u0002\u00b0\u00a4\u0003\u0002\u0002\u0002\u00b0\u00a5",
    "\u0003\u0002\u0002\u0002\u00b0\u00a6\u0003\u0002\u0002\u0002\u00b0\u00a7",
    "\u0003\u0002\u0002\u0002\u00b0\u00a8\u0003\u0002\u0002\u0002\u00b0\u00a9",
    "\u0003\u0002\u0002\u0002\u00b0\u00aa\u0003\u0002\u0002\u0002\u00b0\u00ab",
    "\u0003\u0002\u0002\u0002\u00b0\u00ac\u0003\u0002\u0002\u0002\u00b0\u00ad",
    "\u0003\u0002\u0002\u0002\u00b0\u00ae\u0003\u0002\u0002\u0002\u00b0\u00af",
    "\u0003\u0002\u0002\u0002\u00b1\r\u0003\u0002\u0002\u0002\u00b2\u00b6",
    "\u0007I\u0002\u0002\u00b3\u00b5\u0007B\u0002\u0002\u00b4\u00b3\u0003",
    "\u0002\u0002\u0002\u00b5\u00b8\u0003\u0002\u0002\u0002\u00b6\u00b4\u0003",
    "\u0002\u0002\u0002\u00b6\u00b7\u0003\u0002\u0002\u0002\u00b7\u00d2\u0003",
    "\u0002\u0002\u0002\u00b8\u00b6\u0003\u0002\u0002\u0002\u00b9\u00bd\u0005",
    "F$\u0002\u00ba\u00bd\u0005\u000e\b\u0002\u00bb\u00bd\u0005\u0010\t\u0002",
    "\u00bc\u00b9\u0003\u0002\u0002\u0002\u00bc\u00ba\u0003\u0002\u0002\u0002",
    "\u00bc\u00bb\u0003\u0002\u0002\u0002\u00bd\u00cf\u0003\u0002\u0002\u0002",
    "\u00be\u00c1\u0007O\u0002\u0002\u00bf\u00c1\u0005b2\u0002\u00c0\u00be",
    "\u0003\u0002\u0002\u0002\u00c0\u00bf\u0003\u0002\u0002\u0002\u00c1\u00c5",
    "\u0003\u0002\u0002\u0002\u00c2\u00c4\u0007B\u0002\u0002\u00c3\u00c2",
    "\u0003\u0002\u0002\u0002\u00c4\u00c7\u0003\u0002\u0002\u0002\u00c5\u00c3",
    "\u0003\u0002\u0002\u0002\u00c5\u00c6\u0003\u0002\u0002\u0002\u00c6\u00cb",
    "\u0003\u0002\u0002\u0002\u00c7\u00c5\u0003\u0002\u0002\u0002\u00c8\u00cc",
    "\u0005F$\u0002\u00c9\u00cc\u0005\u000e\b\u0002\u00ca\u00cc\u0005\u0010",
    "\t\u0002\u00cb\u00c8\u0003\u0002\u0002\u0002\u00cb\u00c9\u0003\u0002",
    "\u0002\u0002\u00cb\u00ca\u0003\u0002\u0002\u0002\u00cc\u00ce\u0003\u0002",
    "\u0002\u0002\u00cd\u00c0\u0003\u0002\u0002\u0002\u00ce\u00d1\u0003\u0002",
    "\u0002\u0002\u00cf\u00cd\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002",
    "\u0002\u0002\u00d0\u00d3\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002",
    "\u0002\u0002\u00d2\u00bc\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003\u0002",
    "\u0002\u0002\u00d3\u00d7\u0003\u0002\u0002\u0002\u00d4\u00d6\u0007B",
    "\u0002\u0002\u00d5\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d9\u0003\u0002",
    "\u0002\u0002\u00d7\u00d5\u0003\u0002\u0002\u0002\u00d7\u00d8\u0003\u0002",
    "\u0002\u0002\u00d8\u00da\u0003\u0002\u0002\u0002\u00d9\u00d7\u0003\u0002",
    "\u0002\u0002\u00da\u00db\u0007J\u0002\u0002\u00db\u000f\u0003\u0002",
    "\u0002\u0002\u00dc\u00e0\u0007K\u0002\u0002\u00dd\u00df\u0007B\u0002",
    "\u0002\u00de\u00dd\u0003\u0002\u0002\u0002\u00df\u00e2\u0003\u0002\u0002",
    "\u0002\u00e0\u00de\u0003\u0002\u0002\u0002\u00e0\u00e1\u0003\u0002\u0002",
    "\u0002\u00e1\u00f4\u0003\u0002\u0002\u0002\u00e2\u00e0\u0003\u0002\u0002",
    "\u0002\u00e3\u00f1\u0005\u0012\n\u0002\u00e4\u00e7\u0007O\u0002\u0002",
    "\u00e5\u00e7\u0005b2\u0002\u00e6\u00e4\u0003\u0002\u0002\u0002\u00e6",
    "\u00e5\u0003\u0002\u0002\u0002\u00e7\u00eb\u0003\u0002\u0002\u0002\u00e8",
    "\u00ea\u0007B\u0002\u0002\u00e9\u00e8\u0003\u0002\u0002\u0002\u00ea",
    "\u00ed\u0003\u0002\u0002\u0002\u00eb\u00e9\u0003\u0002\u0002\u0002\u00eb",
    "\u00ec\u0003\u0002\u0002\u0002\u00ec\u00ee\u0003\u0002\u0002\u0002\u00ed",
    "\u00eb\u0003\u0002\u0002\u0002\u00ee\u00f0\u0005\u0012\n\u0002\u00ef",
    "\u00e6\u0003\u0002\u0002\u0002\u00f0\u00f3\u0003\u0002\u0002\u0002\u00f1",
    "\u00ef\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002\u00f2",
    "\u00f5\u0003\u0002\u0002\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f4",
    "\u00e3\u0003\u0002\u0002\u0002\u00f4\u00f5\u0003\u0002\u0002\u0002\u00f5",
    "\u00f9\u0003\u0002\u0002\u0002\u00f6\u00f8\u0007B\u0002\u0002\u00f7",
    "\u00f6\u0003\u0002\u0002\u0002\u00f8\u00fb\u0003\u0002\u0002\u0002\u00f9",
    "\u00f7\u0003\u0002\u0002\u0002\u00f9\u00fa\u0003\u0002\u0002\u0002\u00fa",
    "\u00fc\u0003\u0002\u0002\u0002\u00fb\u00f9\u0003\u0002\u0002\u0002\u00fc",
    "\u00fd\u0007L\u0002\u0002\u00fd\u0011\u0003\u0002\u0002\u0002\u00fe",
    "\u0102\u0005Z.\u0002\u00ff\u0102\u0005^0\u0002\u0100\u0102\u0005T+\u0002",
    "\u0101\u00fe\u0003\u0002\u0002\u0002\u0101\u00ff\u0003\u0002\u0002\u0002",
    "\u0101\u0100\u0003\u0002\u0002\u0002\u0102\u0103\u0003\u0002\u0002\u0002",
    "\u0103\u0104\u0007Q\u0002\u0002\u0104\u0105\u0005P)\u0002\u0105\u0013",
    "\u0003\u0002\u0002\u0002\u0106\u0107\u0007\b\u0002\u0002\u0107\u0108",
    "\u0005Z.\u0002\u0108\u0109\u0007I\u0002\u0002\u0109\u010a\u0005> \u0002",
    "\u010a\u010b\u0007J\u0002\u0002\u010b\u0015\u0003\u0002\u0002\u0002",
    "\u010c\u010d\u0007\u0013\u0002\u0002\u010d\u0112\u0007;\u0002\u0002",
    "\u010e\u0112\u0007\u0014\u0002\u0002\u010f\u0110\u0007\u0013\u0002\u0002",
    "\u0110\u0112\u0007\u0018\u0002\u0002\u0111\u010c\u0003\u0002\u0002\u0002",
    "\u0111\u010e\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002",
    "\u0112\u0017\u0003\u0002\u0002\u0002\u0113\u0114\u0007\u0018\u0002\u0002",
    "\u0114\u0115\u0005Z.\u0002\u0115\u0116\u0007R\u0002\u0002\u0116\u0117",
    "\u0005F$\u0002\u0117\u0118\u00077\u0002\u0002\u0118\u011b\u0005F$\u0002",
    "\u0119\u011a\u00071\u0002\u0002\u011a\u011c\u0005F$\u0002\u011b\u0119",
    "\u0003\u0002\u0002\u0002\u011b\u011c\u0003\u0002\u0002\u0002\u011c\u011e",
    "\u0003\u0002\u0002\u0002\u011d\u011f\u0005b2\u0002\u011e\u011d\u0003",
    "\u0002\u0002\u0002\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u011e\u0003",
    "\u0002\u0002\u0002\u0120\u0121\u0003\u0002\u0002\u0002\u0121\u0125\u0003",
    "\u0002\u0002\u0002\u0122\u0124\u0005\n\u0006\u0002\u0123\u0122\u0003",
    "\u0002\u0002\u0002\u0124\u0127\u0003\u0002\u0002\u0002\u0125\u0123\u0003",
    "\u0002\u0002\u0002\u0125\u0126\u0003\u0002\u0002\u0002\u0126\u0129\u0003",
    "\u0002\u0002\u0002\u0127\u0125\u0003\u0002\u0002\u0002\u0128\u012a\u0005",
    ",\u0017\u0002\u0129\u0128\u0003\u0002\u0002\u0002\u0129\u012a\u0003",
    "\u0002\u0002\u0002\u012a\u012d\u0003\u0002\u0002\u0002\u012b\u012c\u0007",
    "\u000e\u0002\u0002\u012c\u012e\u0007\u0018\u0002\u0002\u012d\u012b\u0003",
    "\u0002\u0002\u0002\u012d\u012e\u0003\u0002\u0002\u0002\u012e\u0019\u0003",
    "\u0002\u0002\u0002\u012f\u0130\u0007\u0018\u0002\u0002\u0130\u0131\u0007",
    "\u000b\u0002\u0002\u0131\u0132\u0005Z.\u0002\u0132\u0133\u0007\u001f",
    "\u0002\u0002\u0133\u0135\u0005F$\u0002\u0134\u0136\u0005b2\u0002\u0135",
    "\u0134\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137",
    "\u0135\u0003\u0002\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138",
    "\u013c\u0003\u0002\u0002\u0002\u0139\u013b\u0005\n\u0006\u0002\u013a",
    "\u0139\u0003\u0002\u0002\u0002\u013b\u013e\u0003\u0002\u0002\u0002\u013c",
    "\u013a\u0003\u0002\u0002\u0002\u013c\u013d\u0003\u0002\u0002\u0002\u013d",
    "\u0140\u0003\u0002\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013f",
    "\u0141\u0005,\u0017\u0002\u0140\u013f\u0003\u0002\u0002\u0002\u0140",
    "\u0141\u0003\u0002\u0002\u0002\u0141\u0144\u0003\u0002\u0002\u0002\u0142",
    "\u0143\u0007\u000e\u0002\u0002\u0143\u0145\u0007\u0018\u0002\u0002\u0144",
    "\u0142\u0003\u0002\u0002\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145",
    "\u001b\u0003\u0002\u0002\u0002\u0146\u0147\u0007\u001d\u0002\u0002\u0147",
    "\u0148\u0007?\u0002\u0002\u0148\u001d\u0003\u0002\u0002\u0002\u0149",
    "\u015a\u0005 \u0011\u0002\u014a\u014e\u0005\"\u0012\u0002\u014b\u014d",
    "\u0005$\u0013\u0002\u014c\u014b\u0003\u0002\u0002\u0002\u014d\u0150",
    "\u0003\u0002\u0002\u0002\u014e\u014c\u0003\u0002\u0002\u0002\u014e\u014f",
    "\u0003\u0002\u0002\u0002\u014f\u0152\u0003\u0002\u0002\u0002\u0150\u014e",
    "\u0003\u0002\u0002\u0002\u0151\u0153\u0005&\u0014\u0002\u0152\u0151",
    "\u0003\u0002\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0157",
    "\u0003\u0002\u0002\u0002\u0154\u0155\u0007\u000e\u0002\u0002\u0155\u0158",
    "\u0007\u001e\u0002\u0002\u0156\u0158\u0007\u0010\u0002\u0002\u0157\u0154",
    "\u0003\u0002\u0002\u0002\u0157\u0156\u0003\u0002\u0002\u0002\u0158\u015a",
    "\u0003\u0002\u0002\u0002\u0159\u0149\u0003\u0002\u0002\u0002\u0159\u014a",
    "\u0003\u0002\u0002\u0002\u015a\u001f\u0003\u0002\u0002\u0002\u015b\u015c",
    "\u0007\u001e\u0002\u0002\u015c\u015e\u0005F$\u0002\u015d\u015f\u0007",
    "6\u0002\u0002\u015e\u015d\u0003\u0002\u0002\u0002\u015e\u015f\u0003",
    "\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002\u0160\u0163\u0005",
    "\f\u0007\u0002\u0161\u0162\u0007\f\u0002\u0002\u0162\u0164\u0005\f\u0007",
    "\u0002\u0163\u0161\u0003\u0002\u0002\u0002\u0163\u0164\u0003\u0002\u0002",
    "\u0002\u0164!\u0003\u0002\u0002\u0002\u0165\u0166\u0007\u001e\u0002",
    "\u0002\u0166\u0168\u0005F$\u0002\u0167\u0169\u00076\u0002\u0002\u0168",
    "\u0167\u0003\u0002\u0002\u0002\u0168\u0169\u0003\u0002\u0002\u0002\u0169",
    "\u016b\u0003\u0002\u0002\u0002\u016a\u016c\u0005d3\u0002\u016b\u016a",
    "\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002\u016c\u0170",
    "\u0003\u0002\u0002\u0002\u016d\u016f\u0005b2\u0002\u016e\u016d\u0003",
    "\u0002\u0002\u0002\u016f\u0172\u0003\u0002\u0002\u0002\u0170\u016e\u0003",
    "\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002\u0171\u0176\u0003",
    "\u0002\u0002\u0002\u0172\u0170\u0003\u0002\u0002\u0002\u0173\u0175\u0005",
    "\n\u0006\u0002\u0174\u0173\u0003\u0002\u0002\u0002\u0175\u0178\u0003",
    "\u0002\u0002\u0002\u0176\u0174\u0003\u0002\u0002\u0002\u0176\u0177\u0003",
    "\u0002\u0002\u0002\u0177#\u0003\u0002\u0002\u0002\u0178\u0176\u0003",
    "\u0002\u0002\u0002\u0179\u017a\u0007\f\u0002\u0002\u017a\u017d\u0007",
    "\u001e\u0002\u0002\u017b\u017d\u0007\r\u0002\u0002\u017c\u0179\u0003",
    "\u0002\u0002\u0002\u017c\u017b\u0003\u0002\u0002\u0002\u017d\u017e\u0003",
    "\u0002\u0002\u0002\u017e\u0180\u0005F$\u0002\u017f\u0181\u00076\u0002",
    "\u0002\u0180\u017f\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002",
    "\u0002\u0181\u0183\u0003\u0002\u0002\u0002\u0182\u0184\u0005d3\u0002",
    "\u0183\u0182\u0003\u0002\u0002\u0002\u0184\u0185\u0003\u0002\u0002\u0002",
    "\u0185\u0183\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002\u0002",
    "\u0186\u018a\u0003\u0002\u0002\u0002\u0187\u0189\u0005\n\u0006\u0002",
    "\u0188\u0187\u0003\u0002\u0002\u0002\u0189\u018c\u0003\u0002\u0002\u0002",
    "\u018a\u0188\u0003\u0002\u0002\u0002\u018a\u018b\u0003\u0002\u0002\u0002",
    "\u018b%\u0003\u0002\u0002\u0002\u018c\u018a\u0003\u0002\u0002\u0002",
    "\u018d\u018f\u0007\f\u0002\u0002\u018e\u0190\u0005d3\u0002\u018f\u018e",
    "\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191\u018f",
    "\u0003\u0002\u0002\u0002\u0191\u0192\u0003\u0002\u0002\u0002\u0192\u0196",
    "\u0003\u0002\u0002\u0002\u0193\u0195\u0005\n\u0006\u0002\u0194\u0193",
    "\u0003\u0002\u0002\u0002\u0195\u0198\u0003\u0002\u0002\u0002\u0196\u0194",
    "\u0003\u0002\u0002\u0002\u0196\u0197\u0003\u0002\u0002\u0002\u0197\'",
    "\u0003\u0002\u0002\u0002\u0198\u0196\u0003\u0002\u0002\u0002\u0199\u019a",
    "\u0007?\u0002\u0002\u019a\u019b\u0007Q\u0002\u0002\u019b)\u0003\u0002",
    "\u0002\u0002\u019c\u019d\u0007$\u0002\u0002\u019d\u019e\u0007<\u0002",
    "\u0002\u019e+\u0003\u0002\u0002\u0002\u019f\u01a0\u0007\'\u0002\u0002",
    "\u01a0-\u0003\u0002\u0002\u0002\u01a1\u01af\t\u0002\u0002\u0002\u01a2",
    "\u01a9\u0005F$\u0002\u01a3\u01a5\u0007P\u0002\u0002\u01a4\u01a3\u0003",
    "\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003",
    "\u0002\u0002\u0002\u01a6\u01a8\u0005F$\u0002\u01a7\u01a4\u0003\u0002",
    "\u0002\u0002\u01a8\u01ab\u0003\u0002\u0002\u0002\u01a9\u01a7\u0003\u0002",
    "\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa\u01ad\u0003\u0002",
    "\u0002\u0002\u01ab\u01a9\u0003\u0002\u0002\u0002\u01ac\u01ae\u0007P",
    "\u0002\u0002\u01ad\u01ac\u0003\u0002\u0002\u0002\u01ad\u01ae\u0003\u0002",
    "\u0002\u0002\u01ae\u01b0\u0003\u0002\u0002\u0002\u01af\u01a2\u0003\u0002",
    "\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0/\u0003\u0002",
    "\u0002\u0002\u01b1\u01b3\u0007/\u0002\u0002\u01b2\u01b4\u0005P)\u0002",
    "\u01b3\u01b2\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002",
    "\u01b41\u0003\u0002\u0002\u0002\u01b5\u01b6\u00072\u0002\u0002\u01b6",
    "3\u0003\u0002\u0002\u0002\u01b7\u01b8\u0007;\u0002\u0002\u01b8\u01ba",
    "\u0005F$\u0002\u01b9\u01bb\u0005b2\u0002\u01ba\u01b9\u0003\u0002\u0002",
    "\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01ba\u0003\u0002\u0002",
    "\u0002\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd\u01c1\u0003\u0002\u0002",
    "\u0002\u01be\u01c0\u0005\n\u0006\u0002\u01bf\u01be\u0003\u0002\u0002",
    "\u0002\u01c0\u01c3\u0003\u0002\u0002\u0002\u01c1\u01bf\u0003\u0002\u0002",
    "\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c7\u0003\u0002\u0002",
    "\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002\u01c4\u01c8\u0007\u0012\u0002",
    "\u0002\u01c5\u01c6\u0007\u000e\u0002\u0002\u01c6\u01c8\u0007;\u0002",
    "\u0002\u01c7\u01c4\u0003\u0002\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002",
    "\u0002\u01c85\u0003\u0002\u0002\u0002\u01c9\u01cb\u0007\u0019\u0002",
    "\u0002\u01ca\u01cc\u0005> \u0002\u01cb\u01ca\u0003\u0002\u0002\u0002",
    "\u01cb\u01cc\u0003\u0002\u0002\u0002\u01cc\u01cf\u0003\u0002\u0002\u0002",
    "\u01cd\u01ce\u0007\u0004\u0002\u0002\u01ce\u01d0\u0005B\"\u0002\u01cf",
    "\u01cd\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0",
    "\u01d2\u0003\u0002\u0002\u0002\u01d1\u01d3\u0005b2\u0002\u01d2\u01d1",
    "\u0003\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4\u01d2",
    "\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d9",
    "\u0003\u0002\u0002\u0002\u01d6\u01d8\u0005\n\u0006\u0002\u01d7\u01d6",
    "\u0003\u0002\u0002\u0002\u01d8\u01db\u0003\u0002\u0002\u0002\u01d9\u01d7",
    "\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002\u01da\u01df",
    "\u0003\u0002\u0002\u0002\u01db\u01d9\u0003\u0002\u0002\u0002\u01dc\u01e0",
    "\u0007\u000f\u0002\u0002\u01dd\u01de\u0007\u000e\u0002\u0002\u01de\u01e0",
    "\u0007\u0019\u0002\u0002\u01df\u01dc\u0003\u0002\u0002\u0002\u01df\u01dd",
    "\u0003\u0002\u0002\u0002\u01e07\u0003\u0002\u0002\u0002\u01e1\u01e2",
    "\u0007\u0019\u0002\u0002\u01e2\u01e4\u0005\\/\u0002\u01e3\u01e5\u0005",
    "> \u0002\u01e4\u01e3\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002",
    "\u0002\u0002\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6\u01e7\u0007\u0004",
    "\u0002\u0002\u01e7\u01e9\u0005B\"\u0002\u01e8\u01e6\u0003\u0002\u0002",
    "\u0002\u01e8\u01e9\u0003\u0002\u0002\u0002\u01e9\u01eb\u0003\u0002\u0002",
    "\u0002\u01ea\u01ec\u0005b2\u0002\u01eb\u01ea\u0003\u0002\u0002\u0002",
    "\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01eb\u0003\u0002\u0002\u0002",
    "\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee\u01f2\u0003\u0002\u0002\u0002",
    "\u01ef\u01f1\u0005\n\u0006\u0002\u01f0\u01ef\u0003\u0002\u0002\u0002",
    "\u01f1\u01f4\u0003\u0002\u0002\u0002\u01f2\u01f0\u0003\u0002\u0002\u0002",
    "\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\u01f8\u0003\u0002\u0002\u0002",
    "\u01f4\u01f2\u0003\u0002\u0002\u0002\u01f5\u01f9\u0007\u000f\u0002\u0002",
    "\u01f6\u01f7\u0007\u000e\u0002\u0002\u01f7\u01f9\u0007\u0019\u0002\u0002",
    "\u01f8\u01f5\u0003\u0002\u0002\u0002\u01f8\u01f6\u0003\u0002\u0002\u0002",
    "\u01f99\u0003\u0002\u0002\u0002\u01fa\u01fc\u00074\u0002\u0002\u01fb",
    "\u01fd\u0005> \u0002\u01fc\u01fb\u0003\u0002\u0002\u0002\u01fc\u01fd",
    "\u0003\u0002\u0002\u0002\u01fd\u01ff\u0003\u0002\u0002\u0002\u01fe\u0200",
    "\u0005b2\u0002\u01ff\u01fe\u0003\u0002\u0002\u0002\u0200\u0201\u0003",
    "\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0201\u0202\u0003",
    "\u0002\u0002\u0002\u0202\u0206\u0003\u0002\u0002\u0002\u0203\u0205\u0005",
    "\n\u0006\u0002\u0204\u0203\u0003\u0002\u0002\u0002\u0205\u0208\u0003",
    "\u0002\u0002\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0206\u0207\u0003",
    "\u0002\u0002\u0002\u0207\u020c\u0003\u0002\u0002\u0002\u0208\u0206\u0003",
    "\u0002\u0002\u0002\u0209\u020d\u0007\u0011\u0002\u0002\u020a\u020b\u0007",
    "\u000e\u0002\u0002\u020b\u020d\u00074\u0002\u0002\u020c\u0209\u0003",
    "\u0002\u0002\u0002\u020c\u020a\u0003\u0002\u0002\u0002\u020d;\u0003",
    "\u0002\u0002\u0002\u020e\u020f\u00074\u0002\u0002\u020f\u0211\u0005",
    "\\/\u0002\u0210\u0212\u0005> \u0002\u0211\u0210\u0003\u0002\u0002\u0002",
    "\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0214\u0003\u0002\u0002\u0002",
    "\u0213\u0215\u0005b2\u0002\u0214\u0213\u0003\u0002\u0002\u0002\u0215",
    "\u0216\u0003\u0002\u0002\u0002\u0216\u0214\u0003\u0002\u0002\u0002\u0216",
    "\u0217\u0003\u0002\u0002\u0002\u0217\u021b\u0003\u0002\u0002\u0002\u0218",
    "\u021a\u0005\n\u0006\u0002\u0219\u0218\u0003\u0002\u0002\u0002\u021a",
    "\u021d\u0003\u0002\u0002\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021b",
    "\u021c\u0003\u0002\u0002\u0002\u021c\u0221\u0003\u0002\u0002\u0002\u021d",
    "\u021b\u0003\u0002\u0002\u0002\u021e\u0222\u0007\u0011\u0002\u0002\u021f",
    "\u0220\u0007\u000e\u0002\u0002\u0220\u0222\u00074\u0002\u0002\u0221",
    "\u021e\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002\u0002\u0002\u0222",
    "=\u0003\u0002\u0002\u0002\u0223\u022c\u0007M\u0002\u0002\u0224\u0229",
    "\u0005@!\u0002\u0225\u0226\u0007O\u0002\u0002\u0226\u0228\u0005@!\u0002",
    "\u0227\u0225\u0003\u0002\u0002\u0002\u0228\u022b\u0003\u0002\u0002\u0002",
    "\u0229\u0227\u0003\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002\u0002",
    "\u022a\u022d\u0003\u0002\u0002\u0002\u022b\u0229\u0003\u0002\u0002\u0002",
    "\u022c\u0224\u0003\u0002\u0002\u0002\u022c\u022d\u0003\u0002\u0002\u0002",
    "\u022d\u022e\u0003\u0002\u0002\u0002\u022e\u022f\u0007N\u0002\u0002",
    "\u022f?\u0003\u0002\u0002\u0002\u0230\u0233\u0005N(\u0002\u0231\u0233",
    "\u0005Z.\u0002\u0232\u0230\u0003\u0002\u0002\u0002\u0232\u0231\u0003",
    "\u0002\u0002\u0002\u0233\u0236\u0003\u0002\u0002\u0002\u0234\u0235\u0007",
    "R\u0002\u0002\u0235\u0237\u0005P)\u0002\u0236\u0234\u0003\u0002\u0002",
    "\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237\u023a\u0003\u0002\u0002",
    "\u0002\u0238\u0239\u0007\u0004\u0002\u0002\u0239\u023b\u0005B\"\u0002",
    "\u023a\u0238\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002",
    "\u023bA\u0003\u0002\u0002\u0002\u023c\u023d\t\u0003\u0002\u0002\u023d",
    "C\u0003\u0002\u0002\u0002\u023e\u0242\u0005F$\u0002\u023f\u0242\u0005",
    "\u0010\t\u0002\u0240\u0242\u0005\u000e\b\u0002\u0241\u023e\u0003\u0002",
    "\u0002\u0002\u0241\u023f\u0003\u0002\u0002\u0002\u0241\u0240\u0003\u0002",
    "\u0002\u0002\u0242\u024b\u0003\u0002\u0002\u0002\u0243\u0247\u0007O",
    "\u0002\u0002\u0244\u0248\u0005F$\u0002\u0245\u0248\u0005\u0010\t\u0002",
    "\u0246\u0248\u0005\u000e\b\u0002\u0247\u0244\u0003\u0002\u0002\u0002",
    "\u0247\u0245\u0003\u0002\u0002\u0002\u0247\u0246\u0003\u0002\u0002\u0002",
    "\u0248\u024a\u0003\u0002\u0002\u0002\u0249\u0243\u0003\u0002\u0002\u0002",
    "\u024a\u024d\u0003\u0002\u0002\u0002\u024b\u0249\u0003\u0002\u0002\u0002",
    "\u024b\u024c\u0003\u0002\u0002\u0002\u024cE\u0003\u0002\u0002\u0002",
    "\u024d\u024b\u0003\u0002\u0002\u0002\u024e\u024f\b$\u0001\u0002\u024f",
    "\u0256\u0005L\'\u0002\u0250\u0256\u0005H%\u0002\u0251\u0252\t\u0004",
    "\u0002\u0002\u0252\u0256\u0005F$\u000b\u0253\u0254\u0007(\u0002\u0002",
    "\u0254\u0256\u0005F$\u0005\u0255\u024e\u0003\u0002\u0002\u0002\u0255",
    "\u0250\u0003\u0002\u0002\u0002\u0255\u0251\u0003\u0002\u0002\u0002\u0255",
    "\u0253\u0003\u0002\u0002\u0002\u0256\u027e\u0003\u0002\u0002\u0002\u0257",
    "\u0258\f\t\u0002\u0002\u0258\u0259\t\u0005\u0002\u0002\u0259\u027d\u0005",
    "F$\n\u025a\u025b\f\b\u0002\u0002\u025b\u025c\t\u0004\u0002\u0002\u025c",
    "\u027d\u0005F$\t\u025d\u025e\f\u0007\u0002\u0002\u025e\u025f\t\u0006",
    "\u0002\u0002\u025f\u027d\u0005F$\b\u0260\u0261\f\u0006\u0002\u0002\u0261",
    "\u0262\t\u0007\u0002\u0002\u0262\u027d\u0005F$\u0007\u0263\u0264\f\u0004",
    "\u0002\u0002\u0264\u0265\t\b\u0002\u0002\u0265\u027d\u0005F$\u0005\u0266",
    "\u0267\f\u000e\u0002\u0002\u0267\u026a\t\t\u0002\u0002\u0268\u026b\u0005",
    "Z.\u0002\u0269\u026b\u0005^0\u0002\u026a\u0268\u0003\u0002\u0002\u0002",
    "\u026a\u0269\u0003\u0002\u0002\u0002\u026b\u027d\u0003\u0002\u0002\u0002",
    "\u026c\u026d\f\r\u0002\u0002\u026d\u026e\u0007I\u0002\u0002\u026e\u026f",
    "\u0005F$\u0002\u026f\u0270\u0007J\u0002\u0002\u0270\u027d\u0003\u0002",
    "\u0002\u0002\u0271\u0272\f\f\u0002\u0002\u0272\u0274\u0007M\u0002\u0002",
    "\u0273\u0275\u0005D#\u0002\u0274\u0273\u0003\u0002\u0002\u0002\u0274",
    "\u0275\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002\u0002\u0002\u0276",
    "\u027d\u0007N\u0002\u0002\u0277\u0278\f\n\u0002\u0002\u0278\u027d\t",
    "\n\u0002\u0002\u0279\u027a\f\u0003\u0002\u0002\u027a\u027b\t\u000b\u0002",
    "\u0002\u027b\u027d\u0005P)\u0002\u027c\u0257\u0003\u0002\u0002\u0002",
    "\u027c\u025a\u0003\u0002\u0002\u0002\u027c\u025d\u0003\u0002\u0002\u0002",
    "\u027c\u0260\u0003\u0002\u0002\u0002\u027c\u0263\u0003\u0002\u0002\u0002",
    "\u027c\u0266\u0003\u0002\u0002\u0002\u027c\u026c\u0003\u0002\u0002\u0002",
    "\u027c\u0271\u0003\u0002\u0002\u0002\u027c\u0277\u0003\u0002\u0002\u0002",
    "\u027c\u0279\u0003\u0002\u0002\u0002\u027d\u0280\u0003\u0002\u0002\u0002",
    "\u027e\u027c\u0003\u0002\u0002\u0002\u027e\u027f\u0003\u0002\u0002\u0002",
    "\u027fG\u0003\u0002\u0002\u0002\u0280\u027e\u0003\u0002\u0002\u0002",
    "\u0281\u0282\u0005J&\u0002\u0282\u0284\u0007M\u0002\u0002\u0283\u0285",
    "\u0005D#\u0002\u0284\u0283\u0003\u0002\u0002\u0002\u0284\u0285\u0003",
    "\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0287\u0007",
    "N\u0002\u0002\u0287I\u0003\u0002\u0002\u0002\u0288\u0289\t\f\u0002\u0002",
    "\u0289K\u0003\u0002\u0002\u0002\u028a\u028b\u0007M\u0002\u0002\u028b",
    "\u028c\u0005F$\u0002\u028c\u028d\u0007N\u0002\u0002\u028d\u0291\u0003",
    "\u0002\u0002\u0002\u028e\u0291\u0005N(\u0002\u028f\u0291\u0005Z.\u0002",
    "\u0290\u028a\u0003\u0002\u0002\u0002\u0290\u028e\u0003\u0002\u0002\u0002",
    "\u0290\u028f\u0003\u0002\u0002\u0002\u0291M\u0003\u0002\u0002\u0002",
    "\u0292\u0297\u0005R*\u0002\u0293\u0297\u0005T+\u0002\u0294\u0297\u0005",
    "V,\u0002\u0295\u0297\u0005X-\u0002\u0296\u0292\u0003\u0002\u0002\u0002",
    "\u0296\u0293\u0003\u0002\u0002\u0002\u0296\u0294\u0003\u0002\u0002\u0002",
    "\u0296\u0295\u0003\u0002\u0002\u0002\u0297O\u0003\u0002\u0002\u0002",
    "\u0298\u029e\u0005F$\u0002\u0299\u029e\u0005\u000e\b\u0002\u029a\u029e",
    "\u0005\u0010\t\u0002\u029b\u029e\u00056\u001c\u0002\u029c\u029e\u0005",
    ":\u001e\u0002\u029d\u0298\u0003\u0002\u0002\u0002\u029d\u0299\u0003",
    "\u0002\u0002\u0002\u029d\u029a\u0003\u0002\u0002\u0002\u029d\u029b\u0003",
    "\u0002\u0002\u0002\u029d\u029c\u0003\u0002\u0002\u0002\u029eQ\u0003",
    "\u0002\u0002\u0002\u029f\u02a0\t\r\u0002\u0002\u02a0S\u0003\u0002\u0002",
    "\u0002\u02a1\u02a2\u0007<\u0002\u0002\u02a2U\u0003\u0002\u0002\u0002",
    "\u02a3\u02a4\t\u000e\u0002\u0002\u02a4W\u0003\u0002\u0002\u0002\u02a5",
    "\u02a6\u0007\"\u0002\u0002\u02a6Y\u0003\u0002\u0002\u0002\u02a7\u02a9",
    "\u0007?\u0002\u0002\u02a8\u02aa\u0007@\u0002\u0002\u02a9\u02a8\u0003",
    "\u0002\u0002\u0002\u02a9\u02aa\u0003\u0002\u0002\u0002\u02aa[\u0003",
    "\u0002\u0002\u0002\u02ab\u02ac\u0007?\u0002\u0002\u02ac]\u0003\u0002",
    "\u0002\u0002\u02ad\u02ae\t\u000f\u0002\u0002\u02ae_\u0003\u0002\u0002",
    "\u0002\u02af\u02b0\u0007A\u0002\u0002\u02b0a\u0003\u0002\u0002\u0002",
    "\u02b1\u02b4\u0007B\u0002\u0002\u02b2\u02b4\u0005`1\u0002\u02b3\u02b1",
    "\u0003\u0002\u0002\u0002\u02b3\u02b2\u0003\u0002\u0002\u0002\u02b4\u02b8",
    "\u0003\u0002\u0002\u0002\u02b5\u02b7\u0007B\u0002\u0002\u02b6\u02b5",
    "\u0003\u0002\u0002\u0002\u02b7\u02ba\u0003\u0002\u0002\u0002\u02b8\u02b6",
    "\u0003\u0002\u0002\u0002\u02b8\u02b9\u0003\u0002\u0002\u0002\u02b9c",
    "\u0003\u0002\u0002\u0002\u02ba\u02b8\u0003\u0002\u0002\u0002\u02bb\u02be",
    "\u0005b2\u0002\u02bc\u02be\u0007Q\u0002\u0002\u02bd\u02bb\u0003\u0002",
    "\u0002\u0002\u02bd\u02bc\u0003\u0002\u0002\u0002\u02be\u02c2\u0003\u0002",
    "\u0002\u0002\u02bf\u02c1\u0007B\u0002\u0002\u02c0\u02bf\u0003\u0002",
    "\u0002\u0002\u02c1\u02c4\u0003\u0002\u0002\u0002\u02c2\u02c0\u0003\u0002",
    "\u0002\u0002\u02c2\u02c3\u0003\u0002\u0002\u0002\u02c3e\u0003\u0002",
    "\u0002\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002elrx\u0081\u0087\u008d",
    "\u0092\u009a\u00a0\u00b0\u00b6\u00bc\u00c0\u00c5\u00cb\u00cf\u00d2\u00d7",
    "\u00e0\u00e6\u00eb\u00f1\u00f4\u00f9\u0101\u0111\u011b\u0120\u0125\u0129",
    "\u012d\u0137\u013c\u0140\u0144\u014e\u0152\u0157\u0159\u015e\u0163\u0168",
    "\u016b\u0170\u0176\u017c\u0180\u0185\u018a\u0191\u0196\u01a4\u01a9\u01ad",
    "\u01af\u01b3\u01bc\u01c1\u01c7\u01cb\u01cf\u01d4\u01d9\u01df\u01e4\u01e8",
    "\u01ed\u01f2\u01f8\u01fc\u0201\u0206\u020c\u0211\u0216\u021b\u0221\u0229",
    "\u022c\u0232\u0236\u023a\u0241\u0247\u024b\u0255\u026a\u0274\u027c\u027e",
    "\u0284\u0290\u0296\u029d\u02a9\u02b3\u02b8\u02bd\u02c2"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, "'''", "'?'", "'@'", "'++'", "'--'", 
                     "'['", "']'", "'{'", "'}'", "'('", "')'", "','", "';'", 
                     "':'", "'='", "'.'", "'+'", "'-'", "'*'", "'/'", "'\\'", 
                     "'<<'", "'>>'", "'>'", "'<'", "'>='", "'<='", "'<>'", 
                     "'+='", "'-='", "'*='", "'/='", "'\\='", "'<<='", "'>>='" ];

var symbolicNames = [ null, "AND", "AS", "BOOLEAN", "BOX", "CREATEOBJECT", 
                      "DIM", "DOUBLE", "DYNAMIC", "EACH", "ELSE", "ELSEIF", 
                      "END", "ENDFUNCTION", "ENDIF", "ENDSUB", "ENDWHILE", 
                      "EXIT", "EXITWHILE", "EVAL", "FALSE", "FLOAT", "FOR", 
                      "FUNCTION", "GETGLOBALAA", "GETLASTRUNCOMPILEERROR", 
                      "GETLASTRUNRUNTIMEERROR", "GOTO", "IF", "IN", "INTEGER", 
                      "INTERFACE", "INVALID", "LET", "LIBRARY", "LINE_NUM", 
                      "MOD", "NEXT", "NOT", "OBJECT", "OBJFUN", "OR", "POS", 
                      "PRINT", "REM", "RETURN", "RUN", "STEP", "STOP", "STRING", 
                      "SUB", "TAB", "THEN", "TO", "TRUE", "VOID", "TYPE", 
                      "WHILE", "STRING_LITERAL", "INT_LITERAL", "FLOAT_LITERAL", 
                      "IDENTIFIER", "IDENTIFIER_TYPE_DECLARATION", "COMMENT", 
                      "NEWLINE", "WS", "SINGLE_QUOTE", "QUESTION_MARK", 
                      "ATTRIBUTE_OPERATOR", "INCREMENT", "DECREMENT", "OPEN_BRACKET", 
                      "CLOSE_BRACKET", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_PARENTHESIS", 
                      "CLOSE_PARENTHESIS", "COMMA", "SEMICOLON", "COLON", 
                      "EQUALS", "DOT", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", 
                      "DIVIDE_INTEGER", "BITSHIFT_LEFT", "BITSHIFT_RIGHT", 
                      "GREATER_THAN", "LESS_THAN", "GREATER_THAN_OR_EQUAL", 
                      "LESS_THAN_OR_EQUAL", "NOT_EQUAL", "ASSIGNMENT_ADD", 
                      "ASSIGNMENT_SUBTRACT", "ASSIGNMENT_MULTIPLY", "ASSIGNMENT_DIVIDE", 
                      "ASSIGNMENT_DIVIDE_INTEGER", "ASSIGNMENT_BITSHIFT_LEFT", 
                      "ASSIGNMENT_BITSHIFT_RIGHT" ];

var ruleNames =  [ "startRule", "component", "componentBody", "componentBodyElement", 
                   "block", "blockStatement", "arrayInitializer", "associativeArrayInitializer", 
                   "associativeElementInitializer", "dimStatement", "exitStatement", 
                   "forStatement", "forEachStatement", "gotoStatement", 
                   "ifThenElseStatement", "ifSingleLineStatement", "ifBlockStatement", 
                   "ifElseIfBlockStatement", "ifElseBlockStatement", "labelStatement", 
                   "libraryStatement", "nextStatement", "printStatement", 
                   "returnStatement", "stopStatement", "whileStatement", 
                   "anonymousFunctionDeclaration", "functionDeclaration", 
                   "anonymousSubDeclaration", "subDeclaration", "parameterList", 
                   "parameter", "baseType", "expressionList", "expression", 
                   "globalFunctionInvocation", "globalFunction", "primary", 
                   "literal", "assignableExpression", "numberLiteral", "stringLiteral", 
                   "booleanLiteral", "invalidLiteral", "identifier", "untypedIdentifier", 
                   "reservedWord", "comment", "endOfLine", "endOfStatement" ];

function BrightScriptParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

BrightScriptParser.prototype = Object.create(antlr4.Parser.prototype);
BrightScriptParser.prototype.constructor = BrightScriptParser;

Object.defineProperty(BrightScriptParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

BrightScriptParser.EOF = antlr4.Token.EOF;
BrightScriptParser.AND = 1;
BrightScriptParser.AS = 2;
BrightScriptParser.BOOLEAN = 3;
BrightScriptParser.BOX = 4;
BrightScriptParser.CREATEOBJECT = 5;
BrightScriptParser.DIM = 6;
BrightScriptParser.DOUBLE = 7;
BrightScriptParser.DYNAMIC = 8;
BrightScriptParser.EACH = 9;
BrightScriptParser.ELSE = 10;
BrightScriptParser.ELSEIF = 11;
BrightScriptParser.END = 12;
BrightScriptParser.ENDFUNCTION = 13;
BrightScriptParser.ENDIF = 14;
BrightScriptParser.ENDSUB = 15;
BrightScriptParser.ENDWHILE = 16;
BrightScriptParser.EXIT = 17;
BrightScriptParser.EXITWHILE = 18;
BrightScriptParser.EVAL = 19;
BrightScriptParser.FALSE = 20;
BrightScriptParser.FLOAT = 21;
BrightScriptParser.FOR = 22;
BrightScriptParser.FUNCTION = 23;
BrightScriptParser.GETGLOBALAA = 24;
BrightScriptParser.GETLASTRUNCOMPILEERROR = 25;
BrightScriptParser.GETLASTRUNRUNTIMEERROR = 26;
BrightScriptParser.GOTO = 27;
BrightScriptParser.IF = 28;
BrightScriptParser.IN = 29;
BrightScriptParser.INTEGER = 30;
BrightScriptParser.INTERFACE = 31;
BrightScriptParser.INVALID = 32;
BrightScriptParser.LET = 33;
BrightScriptParser.LIBRARY = 34;
BrightScriptParser.LINE_NUM = 35;
BrightScriptParser.MOD = 36;
BrightScriptParser.NEXT = 37;
BrightScriptParser.NOT = 38;
BrightScriptParser.OBJECT = 39;
BrightScriptParser.OBJFUN = 40;
BrightScriptParser.OR = 41;
BrightScriptParser.POS = 42;
BrightScriptParser.PRINT = 43;
BrightScriptParser.REM = 44;
BrightScriptParser.RETURN = 45;
BrightScriptParser.RUN = 46;
BrightScriptParser.STEP = 47;
BrightScriptParser.STOP = 48;
BrightScriptParser.STRING = 49;
BrightScriptParser.SUB = 50;
BrightScriptParser.TAB = 51;
BrightScriptParser.THEN = 52;
BrightScriptParser.TO = 53;
BrightScriptParser.TRUE = 54;
BrightScriptParser.VOID = 55;
BrightScriptParser.TYPE = 56;
BrightScriptParser.WHILE = 57;
BrightScriptParser.STRING_LITERAL = 58;
BrightScriptParser.INT_LITERAL = 59;
BrightScriptParser.FLOAT_LITERAL = 60;
BrightScriptParser.IDENTIFIER = 61;
BrightScriptParser.IDENTIFIER_TYPE_DECLARATION = 62;
BrightScriptParser.COMMENT = 63;
BrightScriptParser.NEWLINE = 64;
BrightScriptParser.WS = 65;
BrightScriptParser.SINGLE_QUOTE = 66;
BrightScriptParser.QUESTION_MARK = 67;
BrightScriptParser.ATTRIBUTE_OPERATOR = 68;
BrightScriptParser.INCREMENT = 69;
BrightScriptParser.DECREMENT = 70;
BrightScriptParser.OPEN_BRACKET = 71;
BrightScriptParser.CLOSE_BRACKET = 72;
BrightScriptParser.OPEN_BRACE = 73;
BrightScriptParser.CLOSE_BRACE = 74;
BrightScriptParser.OPEN_PARENTHESIS = 75;
BrightScriptParser.CLOSE_PARENTHESIS = 76;
BrightScriptParser.COMMA = 77;
BrightScriptParser.SEMICOLON = 78;
BrightScriptParser.COLON = 79;
BrightScriptParser.EQUALS = 80;
BrightScriptParser.DOT = 81;
BrightScriptParser.ADD = 82;
BrightScriptParser.SUBTRACT = 83;
BrightScriptParser.MULTIPLY = 84;
BrightScriptParser.DIVIDE = 85;
BrightScriptParser.DIVIDE_INTEGER = 86;
BrightScriptParser.BITSHIFT_LEFT = 87;
BrightScriptParser.BITSHIFT_RIGHT = 88;
BrightScriptParser.GREATER_THAN = 89;
BrightScriptParser.LESS_THAN = 90;
BrightScriptParser.GREATER_THAN_OR_EQUAL = 91;
BrightScriptParser.LESS_THAN_OR_EQUAL = 92;
BrightScriptParser.NOT_EQUAL = 93;
BrightScriptParser.ASSIGNMENT_ADD = 94;
BrightScriptParser.ASSIGNMENT_SUBTRACT = 95;
BrightScriptParser.ASSIGNMENT_MULTIPLY = 96;
BrightScriptParser.ASSIGNMENT_DIVIDE = 97;
BrightScriptParser.ASSIGNMENT_DIVIDE_INTEGER = 98;
BrightScriptParser.ASSIGNMENT_BITSHIFT_LEFT = 99;
BrightScriptParser.ASSIGNMENT_BITSHIFT_RIGHT = 100;

BrightScriptParser.RULE_startRule = 0;
BrightScriptParser.RULE_component = 1;
BrightScriptParser.RULE_componentBody = 2;
BrightScriptParser.RULE_componentBodyElement = 3;
BrightScriptParser.RULE_block = 4;
BrightScriptParser.RULE_blockStatement = 5;
BrightScriptParser.RULE_arrayInitializer = 6;
BrightScriptParser.RULE_associativeArrayInitializer = 7;
BrightScriptParser.RULE_associativeElementInitializer = 8;
BrightScriptParser.RULE_dimStatement = 9;
BrightScriptParser.RULE_exitStatement = 10;
BrightScriptParser.RULE_forStatement = 11;
BrightScriptParser.RULE_forEachStatement = 12;
BrightScriptParser.RULE_gotoStatement = 13;
BrightScriptParser.RULE_ifThenElseStatement = 14;
BrightScriptParser.RULE_ifSingleLineStatement = 15;
BrightScriptParser.RULE_ifBlockStatement = 16;
BrightScriptParser.RULE_ifElseIfBlockStatement = 17;
BrightScriptParser.RULE_ifElseBlockStatement = 18;
BrightScriptParser.RULE_labelStatement = 19;
BrightScriptParser.RULE_libraryStatement = 20;
BrightScriptParser.RULE_nextStatement = 21;
BrightScriptParser.RULE_printStatement = 22;
BrightScriptParser.RULE_returnStatement = 23;
BrightScriptParser.RULE_stopStatement = 24;
BrightScriptParser.RULE_whileStatement = 25;
BrightScriptParser.RULE_anonymousFunctionDeclaration = 26;
BrightScriptParser.RULE_functionDeclaration = 27;
BrightScriptParser.RULE_anonymousSubDeclaration = 28;
BrightScriptParser.RULE_subDeclaration = 29;
BrightScriptParser.RULE_parameterList = 30;
BrightScriptParser.RULE_parameter = 31;
BrightScriptParser.RULE_baseType = 32;
BrightScriptParser.RULE_expressionList = 33;
BrightScriptParser.RULE_expression = 34;
BrightScriptParser.RULE_globalFunctionInvocation = 35;
BrightScriptParser.RULE_globalFunction = 36;
BrightScriptParser.RULE_primary = 37;
BrightScriptParser.RULE_literal = 38;
BrightScriptParser.RULE_assignableExpression = 39;
BrightScriptParser.RULE_numberLiteral = 40;
BrightScriptParser.RULE_stringLiteral = 41;
BrightScriptParser.RULE_booleanLiteral = 42;
BrightScriptParser.RULE_invalidLiteral = 43;
BrightScriptParser.RULE_identifier = 44;
BrightScriptParser.RULE_untypedIdentifier = 45;
BrightScriptParser.RULE_reservedWord = 46;
BrightScriptParser.RULE_comment = 47;
BrightScriptParser.RULE_endOfLine = 48;
BrightScriptParser.RULE_endOfStatement = 49;

function StartRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_startRule;
    return this;
}

StartRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartRuleContext.prototype.constructor = StartRuleContext;

StartRuleContext.prototype.component = function() {
    return this.getTypedRuleContext(ComponentContext,0);
};

StartRuleContext.prototype.EOF = function() {
    return this.getToken(BrightScriptParser.EOF, 0);
};

StartRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterStartRule(this);
	}
};

StartRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitStartRule(this);
	}
};

StartRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitStartRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.StartRuleContext = StartRuleContext;

BrightScriptParser.prototype.startRule = function() {

    var localctx = new StartRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, BrightScriptParser.RULE_startRule);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 100;
        this.component();
        this.state = 101;
        this.match(BrightScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComponentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_component;
    return this;
}

ComponentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentContext.prototype.constructor = ComponentContext;

ComponentContext.prototype.componentBody = function() {
    return this.getTypedRuleContext(ComponentBodyContext,0);
};

ComponentContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

ComponentContext.prototype.libraryStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LibraryStatementContext);
    } else {
        return this.getTypedRuleContext(LibraryStatementContext,i);
    }
};

ComponentContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterComponent(this);
	}
};

ComponentContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitComponent(this);
	}
};

ComponentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitComponent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ComponentContext = ComponentContext;

BrightScriptParser.prototype.component = function() {

    var localctx = new ComponentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, BrightScriptParser.RULE_component);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 106;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 103;
                this.endOfLine(); 
            }
            this.state = 108;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
        }

        this.state = 112;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.LIBRARY) {
            this.state = 109;
            this.libraryStatement();
            this.state = 114;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 118;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.COMMENT || _la===BrightScriptParser.NEWLINE) {
            this.state = 115;
            this.endOfLine();
            this.state = 120;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 121;
        this.componentBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComponentBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_componentBody;
    return this;
}

ComponentBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentBodyContext.prototype.constructor = ComponentBodyContext;

ComponentBodyContext.prototype.componentBodyElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentBodyElementContext);
    } else {
        return this.getTypedRuleContext(ComponentBodyElementContext,i);
    }
};

ComponentBodyContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

ComponentBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterComponentBody(this);
	}
};

ComponentBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitComponentBody(this);
	}
};

ComponentBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitComponentBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ComponentBodyContext = ComponentBodyContext;

BrightScriptParser.prototype.componentBody = function() {

    var localctx = new ComponentBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, BrightScriptParser.RULE_componentBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 123;
        this.componentBodyElement();
        this.state = 133;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 125; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 124;
                    this.endOfLine();
                    this.state = 127; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===BrightScriptParser.COMMENT || _la===BrightScriptParser.NEWLINE);
                this.state = 129;
                this.componentBodyElement(); 
            }
            this.state = 135;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
        }

        this.state = 139;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.COMMENT || _la===BrightScriptParser.NEWLINE) {
            this.state = 136;
            this.endOfLine();
            this.state = 141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComponentBodyElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_componentBodyElement;
    return this;
}

ComponentBodyElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentBodyElementContext.prototype.constructor = ComponentBodyElementContext;

ComponentBodyElementContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

ComponentBodyElementContext.prototype.subDeclaration = function() {
    return this.getTypedRuleContext(SubDeclarationContext,0);
};

ComponentBodyElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterComponentBodyElement(this);
	}
};

ComponentBodyElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitComponentBodyElement(this);
	}
};

ComponentBodyElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitComponentBodyElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ComponentBodyElementContext = ComponentBodyElementContext;

BrightScriptParser.prototype.componentBodyElement = function() {

    var localctx = new ComponentBodyElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, BrightScriptParser.RULE_componentBodyElement);
    try {
        this.state = 144;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 142;
            this.functionDeclaration();
            break;
        case BrightScriptParser.SUB:
            this.enterOuterAlt(localctx, 2);
            this.state = 143;
            this.subDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

BlockContext.prototype.endOfStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfStatementContext);
    } else {
        return this.getTypedRuleContext(EndOfStatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.BlockContext = BlockContext;

BrightScriptParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, BrightScriptParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 146;
        this.blockStatement();
        this.state = 152;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 147;
                this.endOfStatement();
                this.state = 148;
                this.blockStatement(); 
            }
            this.state = 154;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
        }

        this.state = 156; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 155;
        		this.endOfStatement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 158; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,8, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};

BlockStatementContext.prototype.dimStatement = function() {
    return this.getTypedRuleContext(DimStatementContext,0);
};

BlockStatementContext.prototype.exitStatement = function() {
    return this.getTypedRuleContext(ExitStatementContext,0);
};

BlockStatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

BlockStatementContext.prototype.forEachStatement = function() {
    return this.getTypedRuleContext(ForEachStatementContext,0);
};

BlockStatementContext.prototype.ifThenElseStatement = function() {
    return this.getTypedRuleContext(IfThenElseStatementContext,0);
};

BlockStatementContext.prototype.gotoStatement = function() {
    return this.getTypedRuleContext(GotoStatementContext,0);
};

BlockStatementContext.prototype.labelStatement = function() {
    return this.getTypedRuleContext(LabelStatementContext,0);
};

BlockStatementContext.prototype.nextStatement = function() {
    return this.getTypedRuleContext(NextStatementContext,0);
};

BlockStatementContext.prototype.printStatement = function() {
    return this.getTypedRuleContext(PrintStatementContext,0);
};

BlockStatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

BlockStatementContext.prototype.stopStatement = function() {
    return this.getTypedRuleContext(StopStatementContext,0);
};

BlockStatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

BlockStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitBlockStatement(this);
	}
};

BlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.BlockStatementContext = BlockStatementContext;

BrightScriptParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, BrightScriptParser.RULE_blockStatement);
    try {
        this.state = 174;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 160;
            this.comment();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 161;
            this.dimStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 162;
            this.exitStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 163;
            this.forStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 164;
            this.forEachStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 165;
            this.ifThenElseStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 166;
            this.gotoStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 167;
            this.labelStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 168;
            this.nextStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 169;
            this.printStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 170;
            this.returnStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 171;
            this.stopStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 172;
            this.whileStatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 173;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.OPEN_BRACKET = function() {
    return this.getToken(BrightScriptParser.OPEN_BRACKET, 0);
};

ArrayInitializerContext.prototype.CLOSE_BRACKET = function() {
    return this.getToken(BrightScriptParser.CLOSE_BRACKET, 0);
};

ArrayInitializerContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.NEWLINE);
    } else {
        return this.getToken(BrightScriptParser.NEWLINE, i);
    }
};


ArrayInitializerContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayInitializerContext.prototype.arrayInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayInitializerContext);
    } else {
        return this.getTypedRuleContext(ArrayInitializerContext,i);
    }
};

ArrayInitializerContext.prototype.associativeArrayInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssociativeArrayInitializerContext);
    } else {
        return this.getTypedRuleContext(AssociativeArrayInitializerContext,i);
    }
};

ArrayInitializerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.COMMA);
    } else {
        return this.getToken(BrightScriptParser.COMMA, i);
    }
};


ArrayInitializerContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ArrayInitializerContext = ArrayInitializerContext;

BrightScriptParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, BrightScriptParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 176;
        this.match(BrightScriptParser.OPEN_BRACKET);
        this.state = 180;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 177;
                this.match(BrightScriptParser.NEWLINE); 
            }
            this.state = 182;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
        }

        this.state = 208;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (BrightScriptParser.OPEN_BRACKET - 71)) | (1 << (BrightScriptParser.OPEN_BRACE - 71)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 71)) | (1 << (BrightScriptParser.ADD - 71)) | (1 << (BrightScriptParser.SUBTRACT - 71)))) !== 0)) {
            this.state = 186;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case BrightScriptParser.CREATEOBJECT:
            case BrightScriptParser.FALSE:
            case BrightScriptParser.GETGLOBALAA:
            case BrightScriptParser.GETLASTRUNCOMPILEERROR:
            case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
            case BrightScriptParser.INVALID:
            case BrightScriptParser.NOT:
            case BrightScriptParser.STRING:
            case BrightScriptParser.TAB:
            case BrightScriptParser.TRUE:
            case BrightScriptParser.TYPE:
            case BrightScriptParser.STRING_LITERAL:
            case BrightScriptParser.INT_LITERAL:
            case BrightScriptParser.FLOAT_LITERAL:
            case BrightScriptParser.IDENTIFIER:
            case BrightScriptParser.OPEN_PARENTHESIS:
            case BrightScriptParser.ADD:
            case BrightScriptParser.SUBTRACT:
                this.state = 183;
                this.expression(0);
                break;
            case BrightScriptParser.OPEN_BRACKET:
                this.state = 184;
                this.arrayInitializer();
                break;
            case BrightScriptParser.OPEN_BRACE:
                this.state = 185;
                this.associativeArrayInitializer();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 205;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 190;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case BrightScriptParser.COMMA:
                        this.state = 188;
                        this.match(BrightScriptParser.COMMA);
                        break;
                    case BrightScriptParser.COMMENT:
                    case BrightScriptParser.NEWLINE:
                        this.state = 189;
                        this.endOfLine();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 195;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===BrightScriptParser.NEWLINE) {
                        this.state = 192;
                        this.match(BrightScriptParser.NEWLINE);
                        this.state = 197;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 201;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case BrightScriptParser.CREATEOBJECT:
                    case BrightScriptParser.FALSE:
                    case BrightScriptParser.GETGLOBALAA:
                    case BrightScriptParser.GETLASTRUNCOMPILEERROR:
                    case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
                    case BrightScriptParser.INVALID:
                    case BrightScriptParser.NOT:
                    case BrightScriptParser.STRING:
                    case BrightScriptParser.TAB:
                    case BrightScriptParser.TRUE:
                    case BrightScriptParser.TYPE:
                    case BrightScriptParser.STRING_LITERAL:
                    case BrightScriptParser.INT_LITERAL:
                    case BrightScriptParser.FLOAT_LITERAL:
                    case BrightScriptParser.IDENTIFIER:
                    case BrightScriptParser.OPEN_PARENTHESIS:
                    case BrightScriptParser.ADD:
                    case BrightScriptParser.SUBTRACT:
                        this.state = 198;
                        this.expression(0);
                        break;
                    case BrightScriptParser.OPEN_BRACKET:
                        this.state = 199;
                        this.arrayInitializer();
                        break;
                    case BrightScriptParser.OPEN_BRACE:
                        this.state = 200;
                        this.associativeArrayInitializer();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 207;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
            }

        }

        this.state = 213;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.NEWLINE) {
            this.state = 210;
            this.match(BrightScriptParser.NEWLINE);
            this.state = 215;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 216;
        this.match(BrightScriptParser.CLOSE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssociativeArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_associativeArrayInitializer;
    return this;
}

AssociativeArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssociativeArrayInitializerContext.prototype.constructor = AssociativeArrayInitializerContext;

AssociativeArrayInitializerContext.prototype.OPEN_BRACE = function() {
    return this.getToken(BrightScriptParser.OPEN_BRACE, 0);
};

AssociativeArrayInitializerContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(BrightScriptParser.CLOSE_BRACE, 0);
};

AssociativeArrayInitializerContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.NEWLINE);
    } else {
        return this.getToken(BrightScriptParser.NEWLINE, i);
    }
};


AssociativeArrayInitializerContext.prototype.associativeElementInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssociativeElementInitializerContext);
    } else {
        return this.getTypedRuleContext(AssociativeElementInitializerContext,i);
    }
};

AssociativeArrayInitializerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.COMMA);
    } else {
        return this.getToken(BrightScriptParser.COMMA, i);
    }
};


AssociativeArrayInitializerContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

AssociativeArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterAssociativeArrayInitializer(this);
	}
};

AssociativeArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitAssociativeArrayInitializer(this);
	}
};

AssociativeArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitAssociativeArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.AssociativeArrayInitializerContext = AssociativeArrayInitializerContext;

BrightScriptParser.prototype.associativeArrayInitializer = function() {

    var localctx = new AssociativeArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, BrightScriptParser.RULE_associativeArrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 218;
        this.match(BrightScriptParser.OPEN_BRACE);
        this.state = 222;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 219;
                this.match(BrightScriptParser.NEWLINE); 
            }
            this.state = 224;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
        }

        this.state = 242;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.AND) | (1 << BrightScriptParser.BOX) | (1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.DIM) | (1 << BrightScriptParser.EACH) | (1 << BrightScriptParser.ELSE) | (1 << BrightScriptParser.ELSEIF) | (1 << BrightScriptParser.END) | (1 << BrightScriptParser.ENDFUNCTION) | (1 << BrightScriptParser.ENDIF) | (1 << BrightScriptParser.ENDSUB) | (1 << BrightScriptParser.ENDWHILE) | (1 << BrightScriptParser.EXIT) | (1 << BrightScriptParser.EXITWHILE) | (1 << BrightScriptParser.EVAL) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FOR) | (1 << BrightScriptParser.FUNCTION) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR) | (1 << BrightScriptParser.GOTO) | (1 << BrightScriptParser.IF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.LET - 32)) | (1 << (BrightScriptParser.LINE_NUM - 32)) | (1 << (BrightScriptParser.NEXT - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.OBJFUN - 32)) | (1 << (BrightScriptParser.OR - 32)) | (1 << (BrightScriptParser.POS - 32)) | (1 << (BrightScriptParser.PRINT - 32)) | (1 << (BrightScriptParser.REM - 32)) | (1 << (BrightScriptParser.RETURN - 32)) | (1 << (BrightScriptParser.RUN - 32)) | (1 << (BrightScriptParser.STEP - 32)) | (1 << (BrightScriptParser.STOP - 32)) | (1 << (BrightScriptParser.SUB - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.THEN - 32)) | (1 << (BrightScriptParser.TO - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.WHILE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)))) !== 0)) {
            this.state = 225;
            this.associativeElementInitializer();
            this.state = 239;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 228;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case BrightScriptParser.COMMA:
                        this.state = 226;
                        this.match(BrightScriptParser.COMMA);
                        break;
                    case BrightScriptParser.COMMENT:
                    case BrightScriptParser.NEWLINE:
                        this.state = 227;
                        this.endOfLine();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 233;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===BrightScriptParser.NEWLINE) {
                        this.state = 230;
                        this.match(BrightScriptParser.NEWLINE);
                        this.state = 235;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 236;
                    this.associativeElementInitializer(); 
                }
                this.state = 241;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
            }

        }

        this.state = 247;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.NEWLINE) {
            this.state = 244;
            this.match(BrightScriptParser.NEWLINE);
            this.state = 249;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 250;
        this.match(BrightScriptParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssociativeElementInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_associativeElementInitializer;
    return this;
}

AssociativeElementInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssociativeElementInitializerContext.prototype.constructor = AssociativeElementInitializerContext;

AssociativeElementInitializerContext.prototype.COLON = function() {
    return this.getToken(BrightScriptParser.COLON, 0);
};

AssociativeElementInitializerContext.prototype.assignableExpression = function() {
    return this.getTypedRuleContext(AssignableExpressionContext,0);
};

AssociativeElementInitializerContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AssociativeElementInitializerContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

AssociativeElementInitializerContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

AssociativeElementInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterAssociativeElementInitializer(this);
	}
};

AssociativeElementInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitAssociativeElementInitializer(this);
	}
};

AssociativeElementInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitAssociativeElementInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.AssociativeElementInitializerContext = AssociativeElementInitializerContext;

BrightScriptParser.prototype.associativeElementInitializer = function() {

    var localctx = new AssociativeElementInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, BrightScriptParser.RULE_associativeElementInitializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 255;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.IDENTIFIER:
            this.state = 252;
            this.identifier();
            break;
        case BrightScriptParser.AND:
        case BrightScriptParser.BOX:
        case BrightScriptParser.CREATEOBJECT:
        case BrightScriptParser.DIM:
        case BrightScriptParser.EACH:
        case BrightScriptParser.ELSE:
        case BrightScriptParser.ELSEIF:
        case BrightScriptParser.END:
        case BrightScriptParser.ENDFUNCTION:
        case BrightScriptParser.ENDIF:
        case BrightScriptParser.ENDSUB:
        case BrightScriptParser.ENDWHILE:
        case BrightScriptParser.EXIT:
        case BrightScriptParser.EXITWHILE:
        case BrightScriptParser.EVAL:
        case BrightScriptParser.FALSE:
        case BrightScriptParser.FOR:
        case BrightScriptParser.FUNCTION:
        case BrightScriptParser.GETGLOBALAA:
        case BrightScriptParser.GETLASTRUNCOMPILEERROR:
        case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
        case BrightScriptParser.GOTO:
        case BrightScriptParser.IF:
        case BrightScriptParser.INVALID:
        case BrightScriptParser.LET:
        case BrightScriptParser.LINE_NUM:
        case BrightScriptParser.NEXT:
        case BrightScriptParser.NOT:
        case BrightScriptParser.OBJFUN:
        case BrightScriptParser.OR:
        case BrightScriptParser.POS:
        case BrightScriptParser.PRINT:
        case BrightScriptParser.REM:
        case BrightScriptParser.RETURN:
        case BrightScriptParser.RUN:
        case BrightScriptParser.STEP:
        case BrightScriptParser.STOP:
        case BrightScriptParser.SUB:
        case BrightScriptParser.TAB:
        case BrightScriptParser.THEN:
        case BrightScriptParser.TO:
        case BrightScriptParser.TRUE:
        case BrightScriptParser.TYPE:
        case BrightScriptParser.WHILE:
            this.state = 253;
            this.reservedWord();
            break;
        case BrightScriptParser.STRING_LITERAL:
            this.state = 254;
            this.stringLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 257;
        this.match(BrightScriptParser.COLON);
        this.state = 258;
        this.assignableExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_dimStatement;
    return this;
}

DimStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimStatementContext.prototype.constructor = DimStatementContext;

DimStatementContext.prototype.DIM = function() {
    return this.getToken(BrightScriptParser.DIM, 0);
};

DimStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DimStatementContext.prototype.OPEN_BRACKET = function() {
    return this.getToken(BrightScriptParser.OPEN_BRACKET, 0);
};

DimStatementContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

DimStatementContext.prototype.CLOSE_BRACKET = function() {
    return this.getToken(BrightScriptParser.CLOSE_BRACKET, 0);
};

DimStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterDimStatement(this);
	}
};

DimStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitDimStatement(this);
	}
};

DimStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitDimStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.DimStatementContext = DimStatementContext;

BrightScriptParser.prototype.dimStatement = function() {

    var localctx = new DimStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, BrightScriptParser.RULE_dimStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 260;
        this.match(BrightScriptParser.DIM);
        this.state = 261;
        this.identifier();
        this.state = 262;
        this.match(BrightScriptParser.OPEN_BRACKET);
        this.state = 263;
        this.parameterList();
        this.state = 264;
        this.match(BrightScriptParser.CLOSE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExitStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_exitStatement;
    return this;
}

ExitStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExitStatementContext.prototype.constructor = ExitStatementContext;

ExitStatementContext.prototype.EXIT = function() {
    return this.getToken(BrightScriptParser.EXIT, 0);
};

ExitStatementContext.prototype.WHILE = function() {
    return this.getToken(BrightScriptParser.WHILE, 0);
};

ExitStatementContext.prototype.EXITWHILE = function() {
    return this.getToken(BrightScriptParser.EXITWHILE, 0);
};

ExitStatementContext.prototype.FOR = function() {
    return this.getToken(BrightScriptParser.FOR, 0);
};

ExitStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterExitStatement(this);
	}
};

ExitStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitExitStatement(this);
	}
};

ExitStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitExitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ExitStatementContext = ExitStatementContext;

BrightScriptParser.prototype.exitStatement = function() {

    var localctx = new ExitStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, BrightScriptParser.RULE_exitStatement);
    try {
        this.state = 271;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 266;
            this.match(BrightScriptParser.EXIT);
            this.state = 267;
            this.match(BrightScriptParser.WHILE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 268;
            this.match(BrightScriptParser.EXITWHILE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 269;
            this.match(BrightScriptParser.EXIT);
            this.state = 270;
            this.match(BrightScriptParser.FOR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.FOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.FOR);
    } else {
        return this.getToken(BrightScriptParser.FOR, i);
    }
};


ForStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ForStatementContext.prototype.EQUALS = function() {
    return this.getToken(BrightScriptParser.EQUALS, 0);
};

ForStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ForStatementContext.prototype.TO = function() {
    return this.getToken(BrightScriptParser.TO, 0);
};

ForStatementContext.prototype.STEP = function() {
    return this.getToken(BrightScriptParser.STEP, 0);
};

ForStatementContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

ForStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

ForStatementContext.prototype.nextStatement = function() {
    return this.getTypedRuleContext(NextStatementContext,0);
};

ForStatementContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitForStatement(this);
	}
};

ForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ForStatementContext = ForStatementContext;

BrightScriptParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, BrightScriptParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 273;
        this.match(BrightScriptParser.FOR);
        this.state = 274;
        this.identifier();
        this.state = 275;
        this.match(BrightScriptParser.EQUALS);
        this.state = 276;
        this.expression(0);
        this.state = 277;
        this.match(BrightScriptParser.TO);
        this.state = 278;
        this.expression(0);
        this.state = 281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.STEP) {
            this.state = 279;
            this.match(BrightScriptParser.STEP);
            this.state = 280;
            this.expression(0);
        }

        this.state = 284; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 283;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 286; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,27, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 291;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 288;
                this.block(); 
            }
            this.state = 293;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

        this.state = 295;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.NEXT) {
            this.state = 294;
            this.nextStatement();
        }

        this.state = 299;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.END) {
            this.state = 297;
            this.match(BrightScriptParser.END);
            this.state = 298;
            this.match(BrightScriptParser.FOR);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForEachStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_forEachStatement;
    return this;
}

ForEachStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForEachStatementContext.prototype.constructor = ForEachStatementContext;

ForEachStatementContext.prototype.FOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.FOR);
    } else {
        return this.getToken(BrightScriptParser.FOR, i);
    }
};


ForEachStatementContext.prototype.EACH = function() {
    return this.getToken(BrightScriptParser.EACH, 0);
};

ForEachStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ForEachStatementContext.prototype.IN = function() {
    return this.getToken(BrightScriptParser.IN, 0);
};

ForEachStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForEachStatementContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

ForEachStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

ForEachStatementContext.prototype.nextStatement = function() {
    return this.getTypedRuleContext(NextStatementContext,0);
};

ForEachStatementContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

ForEachStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterForEachStatement(this);
	}
};

ForEachStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitForEachStatement(this);
	}
};

ForEachStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitForEachStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ForEachStatementContext = ForEachStatementContext;

BrightScriptParser.prototype.forEachStatement = function() {

    var localctx = new ForEachStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, BrightScriptParser.RULE_forEachStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this.match(BrightScriptParser.FOR);
        this.state = 302;
        this.match(BrightScriptParser.EACH);
        this.state = 303;
        this.identifier();
        this.state = 304;
        this.match(BrightScriptParser.IN);
        this.state = 305;
        this.expression(0);
        this.state = 307; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 306;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 309; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 314;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 311;
                this.block(); 
            }
            this.state = 316;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
        }

        this.state = 318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.NEXT) {
            this.state = 317;
            this.nextStatement();
        }

        this.state = 322;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.END) {
            this.state = 320;
            this.match(BrightScriptParser.END);
            this.state = 321;
            this.match(BrightScriptParser.FOR);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GotoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_gotoStatement;
    return this;
}

GotoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GotoStatementContext.prototype.constructor = GotoStatementContext;

GotoStatementContext.prototype.GOTO = function() {
    return this.getToken(BrightScriptParser.GOTO, 0);
};

GotoStatementContext.prototype.IDENTIFIER = function() {
    return this.getToken(BrightScriptParser.IDENTIFIER, 0);
};

GotoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterGotoStatement(this);
	}
};

GotoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitGotoStatement(this);
	}
};

GotoStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitGotoStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.GotoStatementContext = GotoStatementContext;

BrightScriptParser.prototype.gotoStatement = function() {

    var localctx = new GotoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, BrightScriptParser.RULE_gotoStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 324;
        this.match(BrightScriptParser.GOTO);
        this.state = 325;
        this.match(BrightScriptParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfThenElseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_ifThenElseStatement;
    return this;
}

IfThenElseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfThenElseStatementContext.prototype.constructor = IfThenElseStatementContext;

IfThenElseStatementContext.prototype.ifSingleLineStatement = function() {
    return this.getTypedRuleContext(IfSingleLineStatementContext,0);
};

IfThenElseStatementContext.prototype.ifBlockStatement = function() {
    return this.getTypedRuleContext(IfBlockStatementContext,0);
};

IfThenElseStatementContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

IfThenElseStatementContext.prototype.IF = function() {
    return this.getToken(BrightScriptParser.IF, 0);
};

IfThenElseStatementContext.prototype.ENDIF = function() {
    return this.getToken(BrightScriptParser.ENDIF, 0);
};

IfThenElseStatementContext.prototype.ifElseIfBlockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IfElseIfBlockStatementContext);
    } else {
        return this.getTypedRuleContext(IfElseIfBlockStatementContext,i);
    }
};

IfThenElseStatementContext.prototype.ifElseBlockStatement = function() {
    return this.getTypedRuleContext(IfElseBlockStatementContext,0);
};

IfThenElseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIfThenElseStatement(this);
	}
};

IfThenElseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIfThenElseStatement(this);
	}
};

IfThenElseStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIfThenElseStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IfThenElseStatementContext = IfThenElseStatementContext;

BrightScriptParser.prototype.ifThenElseStatement = function() {

    var localctx = new IfThenElseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, BrightScriptParser.RULE_ifThenElseStatement);
    var _la = 0; // Token type
    try {
        this.state = 343;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 327;
            this.ifSingleLineStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 328;
            this.ifBlockStatement();
            this.state = 332;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 329;
                    this.ifElseIfBlockStatement(); 
                }
                this.state = 334;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
            }

            this.state = 336;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===BrightScriptParser.ELSE) {
                this.state = 335;
                this.ifElseBlockStatement();
            }

            this.state = 341;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case BrightScriptParser.END:
                this.state = 338;
                this.match(BrightScriptParser.END);
                this.state = 339;
                this.match(BrightScriptParser.IF);
                break;
            case BrightScriptParser.ENDIF:
                this.state = 340;
                this.match(BrightScriptParser.ENDIF);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfSingleLineStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_ifSingleLineStatement;
    return this;
}

IfSingleLineStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfSingleLineStatementContext.prototype.constructor = IfSingleLineStatementContext;

IfSingleLineStatementContext.prototype.IF = function() {
    return this.getToken(BrightScriptParser.IF, 0);
};

IfSingleLineStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfSingleLineStatementContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

IfSingleLineStatementContext.prototype.THEN = function() {
    return this.getToken(BrightScriptParser.THEN, 0);
};

IfSingleLineStatementContext.prototype.ELSE = function() {
    return this.getToken(BrightScriptParser.ELSE, 0);
};

IfSingleLineStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIfSingleLineStatement(this);
	}
};

IfSingleLineStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIfSingleLineStatement(this);
	}
};

IfSingleLineStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIfSingleLineStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IfSingleLineStatementContext = IfSingleLineStatementContext;

BrightScriptParser.prototype.ifSingleLineStatement = function() {

    var localctx = new IfSingleLineStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, BrightScriptParser.RULE_ifSingleLineStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 345;
        this.match(BrightScriptParser.IF);
        this.state = 346;
        this.expression(0);
        this.state = 348;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.THEN) {
            this.state = 347;
            this.match(BrightScriptParser.THEN);
        }

        this.state = 350;
        this.blockStatement();
        this.state = 353;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        if(la_===1) {
            this.state = 351;
            this.match(BrightScriptParser.ELSE);
            this.state = 352;
            this.blockStatement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfBlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_ifBlockStatement;
    return this;
}

IfBlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfBlockStatementContext.prototype.constructor = IfBlockStatementContext;

IfBlockStatementContext.prototype.IF = function() {
    return this.getToken(BrightScriptParser.IF, 0);
};

IfBlockStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfBlockStatementContext.prototype.THEN = function() {
    return this.getToken(BrightScriptParser.THEN, 0);
};

IfBlockStatementContext.prototype.endOfStatement = function() {
    return this.getTypedRuleContext(EndOfStatementContext,0);
};

IfBlockStatementContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

IfBlockStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

IfBlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIfBlockStatement(this);
	}
};

IfBlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIfBlockStatement(this);
	}
};

IfBlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIfBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IfBlockStatementContext = IfBlockStatementContext;

BrightScriptParser.prototype.ifBlockStatement = function() {

    var localctx = new IfBlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, BrightScriptParser.RULE_ifBlockStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this.match(BrightScriptParser.IF);
        this.state = 356;
        this.expression(0);
        this.state = 358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.THEN) {
            this.state = 357;
            this.match(BrightScriptParser.THEN);
        }

        this.state = 361;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        if(la_===1) {
            this.state = 360;
            this.endOfStatement();

        }
        this.state = 366;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 363;
                this.endOfLine(); 
            }
            this.state = 368;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
        }

        this.state = 372;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.DIM) | (1 << BrightScriptParser.EXIT) | (1 << BrightScriptParser.EXITWHILE) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FOR) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR) | (1 << BrightScriptParser.GOTO) | (1 << BrightScriptParser.IF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NEXT - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.PRINT - 32)) | (1 << (BrightScriptParser.RETURN - 32)) | (1 << (BrightScriptParser.STOP - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.WHILE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)) | (1 << (BrightScriptParser.COMMENT - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (BrightScriptParser.QUESTION_MARK - 67)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 67)) | (1 << (BrightScriptParser.ADD - 67)) | (1 << (BrightScriptParser.SUBTRACT - 67)))) !== 0)) {
            this.state = 369;
            this.block();
            this.state = 374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfElseIfBlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_ifElseIfBlockStatement;
    return this;
}

IfElseIfBlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfElseIfBlockStatementContext.prototype.constructor = IfElseIfBlockStatementContext;

IfElseIfBlockStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfElseIfBlockStatementContext.prototype.ELSE = function() {
    return this.getToken(BrightScriptParser.ELSE, 0);
};

IfElseIfBlockStatementContext.prototype.IF = function() {
    return this.getToken(BrightScriptParser.IF, 0);
};

IfElseIfBlockStatementContext.prototype.ELSEIF = function() {
    return this.getToken(BrightScriptParser.ELSEIF, 0);
};

IfElseIfBlockStatementContext.prototype.THEN = function() {
    return this.getToken(BrightScriptParser.THEN, 0);
};

IfElseIfBlockStatementContext.prototype.endOfStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfStatementContext);
    } else {
        return this.getTypedRuleContext(EndOfStatementContext,i);
    }
};

IfElseIfBlockStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

IfElseIfBlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIfElseIfBlockStatement(this);
	}
};

IfElseIfBlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIfElseIfBlockStatement(this);
	}
};

IfElseIfBlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIfElseIfBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IfElseIfBlockStatementContext = IfElseIfBlockStatementContext;

BrightScriptParser.prototype.ifElseIfBlockStatement = function() {

    var localctx = new IfElseIfBlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, BrightScriptParser.RULE_ifElseIfBlockStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 378;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.ELSE:
            this.state = 375;
            this.match(BrightScriptParser.ELSE);
            this.state = 376;
            this.match(BrightScriptParser.IF);
            break;
        case BrightScriptParser.ELSEIF:
            this.state = 377;
            this.match(BrightScriptParser.ELSEIF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 380;
        this.expression(0);
        this.state = 382;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.THEN) {
            this.state = 381;
            this.match(BrightScriptParser.THEN);
        }

        this.state = 385; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 384;
        		this.endOfStatement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 387; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,47, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 392;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.DIM) | (1 << BrightScriptParser.EXIT) | (1 << BrightScriptParser.EXITWHILE) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FOR) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR) | (1 << BrightScriptParser.GOTO) | (1 << BrightScriptParser.IF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NEXT - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.PRINT - 32)) | (1 << (BrightScriptParser.RETURN - 32)) | (1 << (BrightScriptParser.STOP - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.WHILE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)) | (1 << (BrightScriptParser.COMMENT - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (BrightScriptParser.QUESTION_MARK - 67)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 67)) | (1 << (BrightScriptParser.ADD - 67)) | (1 << (BrightScriptParser.SUBTRACT - 67)))) !== 0)) {
            this.state = 389;
            this.block();
            this.state = 394;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfElseBlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_ifElseBlockStatement;
    return this;
}

IfElseBlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfElseBlockStatementContext.prototype.constructor = IfElseBlockStatementContext;

IfElseBlockStatementContext.prototype.ELSE = function() {
    return this.getToken(BrightScriptParser.ELSE, 0);
};

IfElseBlockStatementContext.prototype.endOfStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfStatementContext);
    } else {
        return this.getTypedRuleContext(EndOfStatementContext,i);
    }
};

IfElseBlockStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

IfElseBlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIfElseBlockStatement(this);
	}
};

IfElseBlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIfElseBlockStatement(this);
	}
};

IfElseBlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIfElseBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IfElseBlockStatementContext = IfElseBlockStatementContext;

BrightScriptParser.prototype.ifElseBlockStatement = function() {

    var localctx = new IfElseBlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, BrightScriptParser.RULE_ifElseBlockStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 395;
        this.match(BrightScriptParser.ELSE);
        this.state = 397; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 396;
        		this.endOfStatement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 399; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,49, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 404;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.DIM) | (1 << BrightScriptParser.EXIT) | (1 << BrightScriptParser.EXITWHILE) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FOR) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR) | (1 << BrightScriptParser.GOTO) | (1 << BrightScriptParser.IF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NEXT - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.PRINT - 32)) | (1 << (BrightScriptParser.RETURN - 32)) | (1 << (BrightScriptParser.STOP - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.WHILE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)) | (1 << (BrightScriptParser.COMMENT - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (BrightScriptParser.QUESTION_MARK - 67)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 67)) | (1 << (BrightScriptParser.ADD - 67)) | (1 << (BrightScriptParser.SUBTRACT - 67)))) !== 0)) {
            this.state = 401;
            this.block();
            this.state = 406;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_labelStatement;
    return this;
}

LabelStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelStatementContext.prototype.constructor = LabelStatementContext;

LabelStatementContext.prototype.IDENTIFIER = function() {
    return this.getToken(BrightScriptParser.IDENTIFIER, 0);
};

LabelStatementContext.prototype.COLON = function() {
    return this.getToken(BrightScriptParser.COLON, 0);
};

LabelStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterLabelStatement(this);
	}
};

LabelStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitLabelStatement(this);
	}
};

LabelStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitLabelStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.LabelStatementContext = LabelStatementContext;

BrightScriptParser.prototype.labelStatement = function() {

    var localctx = new LabelStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, BrightScriptParser.RULE_labelStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 407;
        this.match(BrightScriptParser.IDENTIFIER);
        this.state = 408;
        this.match(BrightScriptParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LibraryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_libraryStatement;
    return this;
}

LibraryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LibraryStatementContext.prototype.constructor = LibraryStatementContext;

LibraryStatementContext.prototype.LIBRARY = function() {
    return this.getToken(BrightScriptParser.LIBRARY, 0);
};

LibraryStatementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(BrightScriptParser.STRING_LITERAL, 0);
};

LibraryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterLibraryStatement(this);
	}
};

LibraryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitLibraryStatement(this);
	}
};

LibraryStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitLibraryStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.LibraryStatementContext = LibraryStatementContext;

BrightScriptParser.prototype.libraryStatement = function() {

    var localctx = new LibraryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, BrightScriptParser.RULE_libraryStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.match(BrightScriptParser.LIBRARY);
        this.state = 411;
        this.match(BrightScriptParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NextStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_nextStatement;
    return this;
}

NextStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NextStatementContext.prototype.constructor = NextStatementContext;

NextStatementContext.prototype.NEXT = function() {
    return this.getToken(BrightScriptParser.NEXT, 0);
};

NextStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterNextStatement(this);
	}
};

NextStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitNextStatement(this);
	}
};

NextStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitNextStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.NextStatementContext = NextStatementContext;

BrightScriptParser.prototype.nextStatement = function() {

    var localctx = new NextStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, BrightScriptParser.RULE_nextStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 413;
        this.match(BrightScriptParser.NEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrintStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_printStatement;
    return this;
}

PrintStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrintStatementContext.prototype.constructor = PrintStatementContext;

PrintStatementContext.prototype.PRINT = function() {
    return this.getToken(BrightScriptParser.PRINT, 0);
};

PrintStatementContext.prototype.QUESTION_MARK = function() {
    return this.getToken(BrightScriptParser.QUESTION_MARK, 0);
};

PrintStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PrintStatementContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.SEMICOLON);
    } else {
        return this.getToken(BrightScriptParser.SEMICOLON, i);
    }
};


PrintStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterPrintStatement(this);
	}
};

PrintStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitPrintStatement(this);
	}
};

PrintStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitPrintStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.PrintStatementContext = PrintStatementContext;

BrightScriptParser.prototype.printStatement = function() {

    var localctx = new PrintStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, BrightScriptParser.RULE_printStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 415;
        _la = this._input.LA(1);
        if(!(_la===BrightScriptParser.PRINT || _la===BrightScriptParser.QUESTION_MARK)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 429;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (BrightScriptParser.OPEN_PARENTHESIS - 75)) | (1 << (BrightScriptParser.ADD - 75)) | (1 << (BrightScriptParser.SUBTRACT - 75)))) !== 0)) {
            this.state = 416;
            this.expression(0);
            this.state = 423;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 418;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===BrightScriptParser.SEMICOLON) {
                        this.state = 417;
                        this.match(BrightScriptParser.SEMICOLON);
                    }

                    this.state = 420;
                    this.expression(0); 
                }
                this.state = 425;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
            }

            this.state = 427;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===BrightScriptParser.SEMICOLON) {
                this.state = 426;
                this.match(BrightScriptParser.SEMICOLON);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(BrightScriptParser.RETURN, 0);
};

ReturnStatementContext.prototype.assignableExpression = function() {
    return this.getTypedRuleContext(AssignableExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitReturnStatement(this);
	}
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ReturnStatementContext = ReturnStatementContext;

BrightScriptParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, BrightScriptParser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this.match(BrightScriptParser.RETURN);
        this.state = 433;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FUNCTION) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.SUB - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (BrightScriptParser.OPEN_BRACKET - 71)) | (1 << (BrightScriptParser.OPEN_BRACE - 71)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 71)) | (1 << (BrightScriptParser.ADD - 71)) | (1 << (BrightScriptParser.SUBTRACT - 71)))) !== 0)) {
            this.state = 432;
            this.assignableExpression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_stopStatement;
    return this;
}

StopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StopStatementContext.prototype.constructor = StopStatementContext;

StopStatementContext.prototype.STOP = function() {
    return this.getToken(BrightScriptParser.STOP, 0);
};

StopStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterStopStatement(this);
	}
};

StopStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitStopStatement(this);
	}
};

StopStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitStopStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.StopStatementContext = StopStatementContext;

BrightScriptParser.prototype.stopStatement = function() {

    var localctx = new StopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, BrightScriptParser.RULE_stopStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 435;
        this.match(BrightScriptParser.STOP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.WHILE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.WHILE);
    } else {
        return this.getToken(BrightScriptParser.WHILE, i);
    }
};


WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.ENDWHILE = function() {
    return this.getToken(BrightScriptParser.ENDWHILE, 0);
};

WhileStatementContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

WhileStatementContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

WhileStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitWhileStatement(this);
	}
};

WhileStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitWhileStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.WhileStatementContext = WhileStatementContext;

BrightScriptParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, BrightScriptParser.RULE_whileStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 437;
        this.match(BrightScriptParser.WHILE);
        this.state = 438;
        this.expression(0);
        this.state = 440; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 439;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 442; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,56, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.DIM) | (1 << BrightScriptParser.EXIT) | (1 << BrightScriptParser.EXITWHILE) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FOR) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR) | (1 << BrightScriptParser.GOTO) | (1 << BrightScriptParser.IF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NEXT - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.PRINT - 32)) | (1 << (BrightScriptParser.RETURN - 32)) | (1 << (BrightScriptParser.STOP - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.WHILE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)) | (1 << (BrightScriptParser.COMMENT - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (BrightScriptParser.QUESTION_MARK - 67)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 67)) | (1 << (BrightScriptParser.ADD - 67)) | (1 << (BrightScriptParser.SUBTRACT - 67)))) !== 0)) {
            this.state = 444;
            this.block();
            this.state = 449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 453;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.ENDWHILE:
            this.state = 450;
            this.match(BrightScriptParser.ENDWHILE);
            break;
        case BrightScriptParser.END:
            this.state = 451;
            this.match(BrightScriptParser.END);
            this.state = 452;
            this.match(BrightScriptParser.WHILE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnonymousFunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_anonymousFunctionDeclaration;
    return this;
}

AnonymousFunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonymousFunctionDeclarationContext.prototype.constructor = AnonymousFunctionDeclarationContext;

AnonymousFunctionDeclarationContext.prototype.FUNCTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.FUNCTION);
    } else {
        return this.getToken(BrightScriptParser.FUNCTION, i);
    }
};


AnonymousFunctionDeclarationContext.prototype.ENDFUNCTION = function() {
    return this.getToken(BrightScriptParser.ENDFUNCTION, 0);
};

AnonymousFunctionDeclarationContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

AnonymousFunctionDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

AnonymousFunctionDeclarationContext.prototype.AS = function() {
    return this.getToken(BrightScriptParser.AS, 0);
};

AnonymousFunctionDeclarationContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

AnonymousFunctionDeclarationContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

AnonymousFunctionDeclarationContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

AnonymousFunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterAnonymousFunctionDeclaration(this);
	}
};

AnonymousFunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitAnonymousFunctionDeclaration(this);
	}
};

AnonymousFunctionDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitAnonymousFunctionDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.AnonymousFunctionDeclarationContext = AnonymousFunctionDeclarationContext;

BrightScriptParser.prototype.anonymousFunctionDeclaration = function() {

    var localctx = new AnonymousFunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, BrightScriptParser.RULE_anonymousFunctionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 455;
        this.match(BrightScriptParser.FUNCTION);
        this.state = 457;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.OPEN_PARENTHESIS) {
            this.state = 456;
            this.parameterList();
        }

        this.state = 461;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.AS) {
            this.state = 459;
            this.match(BrightScriptParser.AS);
            this.state = 460;
            this.baseType();
        }

        this.state = 464; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 463;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 466; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,61, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 471;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.DIM) | (1 << BrightScriptParser.EXIT) | (1 << BrightScriptParser.EXITWHILE) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FOR) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR) | (1 << BrightScriptParser.GOTO) | (1 << BrightScriptParser.IF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NEXT - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.PRINT - 32)) | (1 << (BrightScriptParser.RETURN - 32)) | (1 << (BrightScriptParser.STOP - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.WHILE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)) | (1 << (BrightScriptParser.COMMENT - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (BrightScriptParser.QUESTION_MARK - 67)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 67)) | (1 << (BrightScriptParser.ADD - 67)) | (1 << (BrightScriptParser.SUBTRACT - 67)))) !== 0)) {
            this.state = 468;
            this.block();
            this.state = 473;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 477;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.ENDFUNCTION:
            this.state = 474;
            this.match(BrightScriptParser.ENDFUNCTION);
            break;
        case BrightScriptParser.END:
            this.state = 475;
            this.match(BrightScriptParser.END);
            this.state = 476;
            this.match(BrightScriptParser.FUNCTION);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.FUNCTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.FUNCTION);
    } else {
        return this.getToken(BrightScriptParser.FUNCTION, i);
    }
};


FunctionDeclarationContext.prototype.untypedIdentifier = function() {
    return this.getTypedRuleContext(UntypedIdentifierContext,0);
};

FunctionDeclarationContext.prototype.ENDFUNCTION = function() {
    return this.getToken(BrightScriptParser.ENDFUNCTION, 0);
};

FunctionDeclarationContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

FunctionDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

FunctionDeclarationContext.prototype.AS = function() {
    return this.getToken(BrightScriptParser.AS, 0);
};

FunctionDeclarationContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

FunctionDeclarationContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

FunctionDeclarationContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitFunctionDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;

BrightScriptParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, BrightScriptParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 479;
        this.match(BrightScriptParser.FUNCTION);
        this.state = 480;
        this.untypedIdentifier();
        this.state = 482;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.OPEN_PARENTHESIS) {
            this.state = 481;
            this.parameterList();
        }

        this.state = 486;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.AS) {
            this.state = 484;
            this.match(BrightScriptParser.AS);
            this.state = 485;
            this.baseType();
        }

        this.state = 489; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 488;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 491; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,66, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.DIM) | (1 << BrightScriptParser.EXIT) | (1 << BrightScriptParser.EXITWHILE) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FOR) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR) | (1 << BrightScriptParser.GOTO) | (1 << BrightScriptParser.IF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NEXT - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.PRINT - 32)) | (1 << (BrightScriptParser.RETURN - 32)) | (1 << (BrightScriptParser.STOP - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.WHILE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)) | (1 << (BrightScriptParser.COMMENT - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (BrightScriptParser.QUESTION_MARK - 67)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 67)) | (1 << (BrightScriptParser.ADD - 67)) | (1 << (BrightScriptParser.SUBTRACT - 67)))) !== 0)) {
            this.state = 493;
            this.block();
            this.state = 498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 502;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.ENDFUNCTION:
            this.state = 499;
            this.match(BrightScriptParser.ENDFUNCTION);
            break;
        case BrightScriptParser.END:
            this.state = 500;
            this.match(BrightScriptParser.END);
            this.state = 501;
            this.match(BrightScriptParser.FUNCTION);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnonymousSubDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_anonymousSubDeclaration;
    return this;
}

AnonymousSubDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonymousSubDeclarationContext.prototype.constructor = AnonymousSubDeclarationContext;

AnonymousSubDeclarationContext.prototype.SUB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.SUB);
    } else {
        return this.getToken(BrightScriptParser.SUB, i);
    }
};


AnonymousSubDeclarationContext.prototype.ENDSUB = function() {
    return this.getToken(BrightScriptParser.ENDSUB, 0);
};

AnonymousSubDeclarationContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

AnonymousSubDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

AnonymousSubDeclarationContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

AnonymousSubDeclarationContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

AnonymousSubDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterAnonymousSubDeclaration(this);
	}
};

AnonymousSubDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitAnonymousSubDeclaration(this);
	}
};

AnonymousSubDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitAnonymousSubDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.AnonymousSubDeclarationContext = AnonymousSubDeclarationContext;

BrightScriptParser.prototype.anonymousSubDeclaration = function() {

    var localctx = new AnonymousSubDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, BrightScriptParser.RULE_anonymousSubDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 504;
        this.match(BrightScriptParser.SUB);
        this.state = 506;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.OPEN_PARENTHESIS) {
            this.state = 505;
            this.parameterList();
        }

        this.state = 509; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 508;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 511; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,70, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.DIM) | (1 << BrightScriptParser.EXIT) | (1 << BrightScriptParser.EXITWHILE) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FOR) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR) | (1 << BrightScriptParser.GOTO) | (1 << BrightScriptParser.IF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NEXT - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.PRINT - 32)) | (1 << (BrightScriptParser.RETURN - 32)) | (1 << (BrightScriptParser.STOP - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.WHILE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)) | (1 << (BrightScriptParser.COMMENT - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (BrightScriptParser.QUESTION_MARK - 67)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 67)) | (1 << (BrightScriptParser.ADD - 67)) | (1 << (BrightScriptParser.SUBTRACT - 67)))) !== 0)) {
            this.state = 513;
            this.block();
            this.state = 518;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 522;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.ENDSUB:
            this.state = 519;
            this.match(BrightScriptParser.ENDSUB);
            break;
        case BrightScriptParser.END:
            this.state = 520;
            this.match(BrightScriptParser.END);
            this.state = 521;
            this.match(BrightScriptParser.SUB);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_subDeclaration;
    return this;
}

SubDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubDeclarationContext.prototype.constructor = SubDeclarationContext;

SubDeclarationContext.prototype.SUB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.SUB);
    } else {
        return this.getToken(BrightScriptParser.SUB, i);
    }
};


SubDeclarationContext.prototype.untypedIdentifier = function() {
    return this.getTypedRuleContext(UntypedIdentifierContext,0);
};

SubDeclarationContext.prototype.ENDSUB = function() {
    return this.getToken(BrightScriptParser.ENDSUB, 0);
};

SubDeclarationContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

SubDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

SubDeclarationContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

SubDeclarationContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

SubDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterSubDeclaration(this);
	}
};

SubDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitSubDeclaration(this);
	}
};

SubDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitSubDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.SubDeclarationContext = SubDeclarationContext;

BrightScriptParser.prototype.subDeclaration = function() {

    var localctx = new SubDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, BrightScriptParser.RULE_subDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 524;
        this.match(BrightScriptParser.SUB);
        this.state = 525;
        this.untypedIdentifier();
        this.state = 527;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.OPEN_PARENTHESIS) {
            this.state = 526;
            this.parameterList();
        }

        this.state = 530; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 529;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 532; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,74, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 537;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.DIM) | (1 << BrightScriptParser.EXIT) | (1 << BrightScriptParser.EXITWHILE) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FOR) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR) | (1 << BrightScriptParser.GOTO) | (1 << BrightScriptParser.IF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NEXT - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.PRINT - 32)) | (1 << (BrightScriptParser.RETURN - 32)) | (1 << (BrightScriptParser.STOP - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.WHILE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)) | (1 << (BrightScriptParser.COMMENT - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (BrightScriptParser.QUESTION_MARK - 67)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 67)) | (1 << (BrightScriptParser.ADD - 67)) | (1 << (BrightScriptParser.SUBTRACT - 67)))) !== 0)) {
            this.state = 534;
            this.block();
            this.state = 539;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 543;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.ENDSUB:
            this.state = 540;
            this.match(BrightScriptParser.ENDSUB);
            break;
        case BrightScriptParser.END:
            this.state = 541;
            this.match(BrightScriptParser.END);
            this.state = 542;
            this.match(BrightScriptParser.SUB);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.OPEN_PARENTHESIS = function() {
    return this.getToken(BrightScriptParser.OPEN_PARENTHESIS, 0);
};

ParameterListContext.prototype.CLOSE_PARENTHESIS = function() {
    return this.getToken(BrightScriptParser.CLOSE_PARENTHESIS, 0);
};

ParameterListContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

ParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.COMMA);
    } else {
        return this.getToken(BrightScriptParser.COMMA, i);
    }
};


ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitParameterList(this);
	}
};

ParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ParameterListContext = ParameterListContext;

BrightScriptParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, BrightScriptParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        this.match(BrightScriptParser.OPEN_PARENTHESIS);
        this.state = 554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.FALSE || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)))) !== 0)) {
            this.state = 546;
            this.parameter();
            this.state = 551;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===BrightScriptParser.COMMA) {
                this.state = 547;
                this.match(BrightScriptParser.COMMA);
                this.state = 548;
                this.parameter();
                this.state = 553;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 556;
        this.match(BrightScriptParser.CLOSE_PARENTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

ParameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ParameterContext.prototype.EQUALS = function() {
    return this.getToken(BrightScriptParser.EQUALS, 0);
};

ParameterContext.prototype.assignableExpression = function() {
    return this.getTypedRuleContext(AssignableExpressionContext,0);
};

ParameterContext.prototype.AS = function() {
    return this.getToken(BrightScriptParser.AS, 0);
};

ParameterContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitParameter(this);
	}
};

ParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ParameterContext = ParameterContext;

BrightScriptParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, BrightScriptParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.FALSE:
        case BrightScriptParser.INVALID:
        case BrightScriptParser.TRUE:
        case BrightScriptParser.STRING_LITERAL:
        case BrightScriptParser.INT_LITERAL:
        case BrightScriptParser.FLOAT_LITERAL:
            this.state = 558;
            this.literal();
            break;
        case BrightScriptParser.IDENTIFIER:
            this.state = 559;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.EQUALS) {
            this.state = 562;
            this.match(BrightScriptParser.EQUALS);
            this.state = 563;
            this.assignableExpression();
        }

        this.state = 568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.AS) {
            this.state = 566;
            this.match(BrightScriptParser.AS);
            this.state = 567;
            this.baseType();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_baseType;
    return this;
}

BaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(BrightScriptParser.BOOLEAN, 0);
};

BaseTypeContext.prototype.DOUBLE = function() {
    return this.getToken(BrightScriptParser.DOUBLE, 0);
};

BaseTypeContext.prototype.DYNAMIC = function() {
    return this.getToken(BrightScriptParser.DYNAMIC, 0);
};

BaseTypeContext.prototype.FLOAT = function() {
    return this.getToken(BrightScriptParser.FLOAT, 0);
};

BaseTypeContext.prototype.FUNCTION = function() {
    return this.getToken(BrightScriptParser.FUNCTION, 0);
};

BaseTypeContext.prototype.INTEGER = function() {
    return this.getToken(BrightScriptParser.INTEGER, 0);
};

BaseTypeContext.prototype.OBJECT = function() {
    return this.getToken(BrightScriptParser.OBJECT, 0);
};

BaseTypeContext.prototype.STRING = function() {
    return this.getToken(BrightScriptParser.STRING, 0);
};

BaseTypeContext.prototype.VOID = function() {
    return this.getToken(BrightScriptParser.VOID, 0);
};

BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitBaseType(this);
	}
};

BaseTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitBaseType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.BaseTypeContext = BaseTypeContext;

BrightScriptParser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, BrightScriptParser.RULE_baseType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.BOOLEAN) | (1 << BrightScriptParser.DOUBLE) | (1 << BrightScriptParser.DYNAMIC) | (1 << BrightScriptParser.FLOAT) | (1 << BrightScriptParser.FUNCTION) | (1 << BrightScriptParser.INTEGER))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (BrightScriptParser.OBJECT - 39)) | (1 << (BrightScriptParser.STRING - 39)) | (1 << (BrightScriptParser.VOID - 39)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.associativeArrayInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssociativeArrayInitializerContext);
    } else {
        return this.getTypedRuleContext(AssociativeArrayInitializerContext,i);
    }
};

ExpressionListContext.prototype.arrayInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayInitializerContext);
    } else {
        return this.getTypedRuleContext(ArrayInitializerContext,i);
    }
};

ExpressionListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.COMMA);
    } else {
        return this.getToken(BrightScriptParser.COMMA, i);
    }
};


ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitExpressionList(this);
	}
};

ExpressionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitExpressionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ExpressionListContext = ExpressionListContext;

BrightScriptParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, BrightScriptParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.CREATEOBJECT:
        case BrightScriptParser.FALSE:
        case BrightScriptParser.GETGLOBALAA:
        case BrightScriptParser.GETLASTRUNCOMPILEERROR:
        case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
        case BrightScriptParser.INVALID:
        case BrightScriptParser.NOT:
        case BrightScriptParser.STRING:
        case BrightScriptParser.TAB:
        case BrightScriptParser.TRUE:
        case BrightScriptParser.TYPE:
        case BrightScriptParser.STRING_LITERAL:
        case BrightScriptParser.INT_LITERAL:
        case BrightScriptParser.FLOAT_LITERAL:
        case BrightScriptParser.IDENTIFIER:
        case BrightScriptParser.OPEN_PARENTHESIS:
        case BrightScriptParser.ADD:
        case BrightScriptParser.SUBTRACT:
            this.state = 572;
            this.expression(0);
            break;
        case BrightScriptParser.OPEN_BRACE:
            this.state = 573;
            this.associativeArrayInitializer();
            break;
        case BrightScriptParser.OPEN_BRACKET:
            this.state = 574;
            this.arrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 585;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.COMMA) {
            this.state = 577;
            this.match(BrightScriptParser.COMMA);
            this.state = 581;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case BrightScriptParser.CREATEOBJECT:
            case BrightScriptParser.FALSE:
            case BrightScriptParser.GETGLOBALAA:
            case BrightScriptParser.GETLASTRUNCOMPILEERROR:
            case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
            case BrightScriptParser.INVALID:
            case BrightScriptParser.NOT:
            case BrightScriptParser.STRING:
            case BrightScriptParser.TAB:
            case BrightScriptParser.TRUE:
            case BrightScriptParser.TYPE:
            case BrightScriptParser.STRING_LITERAL:
            case BrightScriptParser.INT_LITERAL:
            case BrightScriptParser.FLOAT_LITERAL:
            case BrightScriptParser.IDENTIFIER:
            case BrightScriptParser.OPEN_PARENTHESIS:
            case BrightScriptParser.ADD:
            case BrightScriptParser.SUBTRACT:
                this.state = 578;
                this.expression(0);
                break;
            case BrightScriptParser.OPEN_BRACE:
                this.state = 579;
                this.associativeArrayInitializer();
                break;
            case BrightScriptParser.OPEN_BRACKET:
                this.state = 580;
                this.arrayInitializer();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

ExpressionContext.prototype.globalFunctionInvocation = function() {
    return this.getTypedRuleContext(GlobalFunctionInvocationContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.ADD = function() {
    return this.getToken(BrightScriptParser.ADD, 0);
};

ExpressionContext.prototype.SUBTRACT = function() {
    return this.getToken(BrightScriptParser.SUBTRACT, 0);
};

ExpressionContext.prototype.NOT = function() {
    return this.getToken(BrightScriptParser.NOT, 0);
};

ExpressionContext.prototype.MULTIPLY = function() {
    return this.getToken(BrightScriptParser.MULTIPLY, 0);
};

ExpressionContext.prototype.DIVIDE = function() {
    return this.getToken(BrightScriptParser.DIVIDE, 0);
};

ExpressionContext.prototype.MOD = function() {
    return this.getToken(BrightScriptParser.MOD, 0);
};

ExpressionContext.prototype.DIVIDE_INTEGER = function() {
    return this.getToken(BrightScriptParser.DIVIDE_INTEGER, 0);
};

ExpressionContext.prototype.BITSHIFT_LEFT = function() {
    return this.getToken(BrightScriptParser.BITSHIFT_LEFT, 0);
};

ExpressionContext.prototype.BITSHIFT_RIGHT = function() {
    return this.getToken(BrightScriptParser.BITSHIFT_RIGHT, 0);
};

ExpressionContext.prototype.GREATER_THAN = function() {
    return this.getToken(BrightScriptParser.GREATER_THAN, 0);
};

ExpressionContext.prototype.LESS_THAN = function() {
    return this.getToken(BrightScriptParser.LESS_THAN, 0);
};

ExpressionContext.prototype.EQUALS = function() {
    return this.getToken(BrightScriptParser.EQUALS, 0);
};

ExpressionContext.prototype.NOT_EQUAL = function() {
    return this.getToken(BrightScriptParser.NOT_EQUAL, 0);
};

ExpressionContext.prototype.GREATER_THAN_OR_EQUAL = function() {
    return this.getToken(BrightScriptParser.GREATER_THAN_OR_EQUAL, 0);
};

ExpressionContext.prototype.LESS_THAN_OR_EQUAL = function() {
    return this.getToken(BrightScriptParser.LESS_THAN_OR_EQUAL, 0);
};

ExpressionContext.prototype.AND = function() {
    return this.getToken(BrightScriptParser.AND, 0);
};

ExpressionContext.prototype.OR = function() {
    return this.getToken(BrightScriptParser.OR, 0);
};

ExpressionContext.prototype.DOT = function() {
    return this.getToken(BrightScriptParser.DOT, 0);
};

ExpressionContext.prototype.ATTRIBUTE_OPERATOR = function() {
    return this.getToken(BrightScriptParser.ATTRIBUTE_OPERATOR, 0);
};

ExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExpressionContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

ExpressionContext.prototype.OPEN_BRACKET = function() {
    return this.getToken(BrightScriptParser.OPEN_BRACKET, 0);
};

ExpressionContext.prototype.CLOSE_BRACKET = function() {
    return this.getToken(BrightScriptParser.CLOSE_BRACKET, 0);
};

ExpressionContext.prototype.OPEN_PARENTHESIS = function() {
    return this.getToken(BrightScriptParser.OPEN_PARENTHESIS, 0);
};

ExpressionContext.prototype.CLOSE_PARENTHESIS = function() {
    return this.getToken(BrightScriptParser.CLOSE_PARENTHESIS, 0);
};

ExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ExpressionContext.prototype.INCREMENT = function() {
    return this.getToken(BrightScriptParser.INCREMENT, 0);
};

ExpressionContext.prototype.DECREMENT = function() {
    return this.getToken(BrightScriptParser.DECREMENT, 0);
};

ExpressionContext.prototype.assignableExpression = function() {
    return this.getTypedRuleContext(AssignableExpressionContext,0);
};

ExpressionContext.prototype.ASSIGNMENT_ADD = function() {
    return this.getToken(BrightScriptParser.ASSIGNMENT_ADD, 0);
};

ExpressionContext.prototype.ASSIGNMENT_SUBTRACT = function() {
    return this.getToken(BrightScriptParser.ASSIGNMENT_SUBTRACT, 0);
};

ExpressionContext.prototype.ASSIGNMENT_MULTIPLY = function() {
    return this.getToken(BrightScriptParser.ASSIGNMENT_MULTIPLY, 0);
};

ExpressionContext.prototype.ASSIGNMENT_DIVIDE = function() {
    return this.getToken(BrightScriptParser.ASSIGNMENT_DIVIDE, 0);
};

ExpressionContext.prototype.ASSIGNMENT_DIVIDE_INTEGER = function() {
    return this.getToken(BrightScriptParser.ASSIGNMENT_DIVIDE_INTEGER, 0);
};

ExpressionContext.prototype.ASSIGNMENT_BITSHIFT_LEFT = function() {
    return this.getToken(BrightScriptParser.ASSIGNMENT_BITSHIFT_LEFT, 0);
};

ExpressionContext.prototype.ASSIGNMENT_BITSHIFT_RIGHT = function() {
    return this.getToken(BrightScriptParser.ASSIGNMENT_BITSHIFT_RIGHT, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



BrightScriptParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, BrightScriptParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 595;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.FALSE:
        case BrightScriptParser.INVALID:
        case BrightScriptParser.TRUE:
        case BrightScriptParser.STRING_LITERAL:
        case BrightScriptParser.INT_LITERAL:
        case BrightScriptParser.FLOAT_LITERAL:
        case BrightScriptParser.IDENTIFIER:
        case BrightScriptParser.OPEN_PARENTHESIS:
            this.state = 589;
            this.primary();
            break;
        case BrightScriptParser.CREATEOBJECT:
        case BrightScriptParser.GETGLOBALAA:
        case BrightScriptParser.GETLASTRUNCOMPILEERROR:
        case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
        case BrightScriptParser.STRING:
        case BrightScriptParser.TAB:
        case BrightScriptParser.TYPE:
            this.state = 590;
            this.globalFunctionInvocation();
            break;
        case BrightScriptParser.ADD:
        case BrightScriptParser.SUBTRACT:
            this.state = 591;
            _la = this._input.LA(1);
            if(!(_la===BrightScriptParser.ADD || _la===BrightScriptParser.SUBTRACT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 592;
            this.expression(9);
            break;
        case BrightScriptParser.NOT:
            this.state = 593;
            this.match(BrightScriptParser.NOT);
            this.state = 594;
            this.expression(3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 636;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 634;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 597;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 598;
                    _la = this._input.LA(1);
                    if(!(_la===BrightScriptParser.MOD || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (BrightScriptParser.MULTIPLY - 84)) | (1 << (BrightScriptParser.DIVIDE - 84)) | (1 << (BrightScriptParser.DIVIDE_INTEGER - 84)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 599;
                    this.expression(8);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 600;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 601;
                    _la = this._input.LA(1);
                    if(!(_la===BrightScriptParser.ADD || _la===BrightScriptParser.SUBTRACT)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 602;
                    this.expression(7);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 603;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 604;
                    _la = this._input.LA(1);
                    if(!(_la===BrightScriptParser.BITSHIFT_LEFT || _la===BrightScriptParser.BITSHIFT_RIGHT)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 605;
                    this.expression(6);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 606;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 607;
                    _la = this._input.LA(1);
                    if(!(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (BrightScriptParser.EQUALS - 80)) | (1 << (BrightScriptParser.GREATER_THAN - 80)) | (1 << (BrightScriptParser.LESS_THAN - 80)) | (1 << (BrightScriptParser.GREATER_THAN_OR_EQUAL - 80)) | (1 << (BrightScriptParser.LESS_THAN_OR_EQUAL - 80)) | (1 << (BrightScriptParser.NOT_EQUAL - 80)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 608;
                    this.expression(5);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 609;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 610;
                    _la = this._input.LA(1);
                    if(!(_la===BrightScriptParser.AND || _la===BrightScriptParser.OR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 611;
                    this.expression(3);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 612;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 613;
                    _la = this._input.LA(1);
                    if(!(_la===BrightScriptParser.ATTRIBUTE_OPERATOR || _la===BrightScriptParser.DOT)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 616;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case BrightScriptParser.IDENTIFIER:
                        this.state = 614;
                        this.identifier();
                        break;
                    case BrightScriptParser.AND:
                    case BrightScriptParser.BOX:
                    case BrightScriptParser.CREATEOBJECT:
                    case BrightScriptParser.DIM:
                    case BrightScriptParser.EACH:
                    case BrightScriptParser.ELSE:
                    case BrightScriptParser.ELSEIF:
                    case BrightScriptParser.END:
                    case BrightScriptParser.ENDFUNCTION:
                    case BrightScriptParser.ENDIF:
                    case BrightScriptParser.ENDSUB:
                    case BrightScriptParser.ENDWHILE:
                    case BrightScriptParser.EXIT:
                    case BrightScriptParser.EXITWHILE:
                    case BrightScriptParser.EVAL:
                    case BrightScriptParser.FALSE:
                    case BrightScriptParser.FOR:
                    case BrightScriptParser.FUNCTION:
                    case BrightScriptParser.GETGLOBALAA:
                    case BrightScriptParser.GETLASTRUNCOMPILEERROR:
                    case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
                    case BrightScriptParser.GOTO:
                    case BrightScriptParser.IF:
                    case BrightScriptParser.INVALID:
                    case BrightScriptParser.LET:
                    case BrightScriptParser.LINE_NUM:
                    case BrightScriptParser.NEXT:
                    case BrightScriptParser.NOT:
                    case BrightScriptParser.OBJFUN:
                    case BrightScriptParser.OR:
                    case BrightScriptParser.POS:
                    case BrightScriptParser.PRINT:
                    case BrightScriptParser.REM:
                    case BrightScriptParser.RETURN:
                    case BrightScriptParser.RUN:
                    case BrightScriptParser.STEP:
                    case BrightScriptParser.STOP:
                    case BrightScriptParser.SUB:
                    case BrightScriptParser.TAB:
                    case BrightScriptParser.THEN:
                    case BrightScriptParser.TO:
                    case BrightScriptParser.TRUE:
                    case BrightScriptParser.TYPE:
                    case BrightScriptParser.WHILE:
                        this.state = 615;
                        this.reservedWord();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 618;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 619;
                    this.match(BrightScriptParser.OPEN_BRACKET);
                    this.state = 620;
                    this.expression(0);
                    this.state = 621;
                    this.match(BrightScriptParser.CLOSE_BRACKET);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 623;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 624;
                    this.match(BrightScriptParser.OPEN_PARENTHESIS);
                    this.state = 626;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (BrightScriptParser.OPEN_BRACKET - 71)) | (1 << (BrightScriptParser.OPEN_BRACE - 71)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 71)) | (1 << (BrightScriptParser.ADD - 71)) | (1 << (BrightScriptParser.SUBTRACT - 71)))) !== 0)) {
                        this.state = 625;
                        this.expressionList();
                    }

                    this.state = 628;
                    this.match(BrightScriptParser.CLOSE_PARENTHESIS);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 629;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 630;
                    _la = this._input.LA(1);
                    if(!(_la===BrightScriptParser.INCREMENT || _la===BrightScriptParser.DECREMENT)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 631;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 632;
                    _la = this._input.LA(1);
                    if(!(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (BrightScriptParser.EQUALS - 80)) | (1 << (BrightScriptParser.ASSIGNMENT_ADD - 80)) | (1 << (BrightScriptParser.ASSIGNMENT_SUBTRACT - 80)) | (1 << (BrightScriptParser.ASSIGNMENT_MULTIPLY - 80)) | (1 << (BrightScriptParser.ASSIGNMENT_DIVIDE - 80)) | (1 << (BrightScriptParser.ASSIGNMENT_DIVIDE_INTEGER - 80)) | (1 << (BrightScriptParser.ASSIGNMENT_BITSHIFT_LEFT - 80)) | (1 << (BrightScriptParser.ASSIGNMENT_BITSHIFT_RIGHT - 80)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 633;
                    this.assignableExpression();
                    break;

                } 
            }
            this.state = 638;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function GlobalFunctionInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_globalFunctionInvocation;
    return this;
}

GlobalFunctionInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobalFunctionInvocationContext.prototype.constructor = GlobalFunctionInvocationContext;

GlobalFunctionInvocationContext.prototype.globalFunction = function() {
    return this.getTypedRuleContext(GlobalFunctionContext,0);
};

GlobalFunctionInvocationContext.prototype.OPEN_PARENTHESIS = function() {
    return this.getToken(BrightScriptParser.OPEN_PARENTHESIS, 0);
};

GlobalFunctionInvocationContext.prototype.CLOSE_PARENTHESIS = function() {
    return this.getToken(BrightScriptParser.CLOSE_PARENTHESIS, 0);
};

GlobalFunctionInvocationContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

GlobalFunctionInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterGlobalFunctionInvocation(this);
	}
};

GlobalFunctionInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitGlobalFunctionInvocation(this);
	}
};

GlobalFunctionInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitGlobalFunctionInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.GlobalFunctionInvocationContext = GlobalFunctionInvocationContext;

BrightScriptParser.prototype.globalFunctionInvocation = function() {

    var localctx = new GlobalFunctionInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, BrightScriptParser.RULE_globalFunctionInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.globalFunction();
        this.state = 640;
        this.match(BrightScriptParser.OPEN_PARENTHESIS);
        this.state = 642;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.STRING - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.STRING_LITERAL - 32)) | (1 << (BrightScriptParser.INT_LITERAL - 32)) | (1 << (BrightScriptParser.FLOAT_LITERAL - 32)) | (1 << (BrightScriptParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (BrightScriptParser.OPEN_BRACKET - 71)) | (1 << (BrightScriptParser.OPEN_BRACE - 71)) | (1 << (BrightScriptParser.OPEN_PARENTHESIS - 71)) | (1 << (BrightScriptParser.ADD - 71)) | (1 << (BrightScriptParser.SUBTRACT - 71)))) !== 0)) {
            this.state = 641;
            this.expressionList();
        }

        this.state = 644;
        this.match(BrightScriptParser.CLOSE_PARENTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GlobalFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_globalFunction;
    return this;
}

GlobalFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobalFunctionContext.prototype.constructor = GlobalFunctionContext;

GlobalFunctionContext.prototype.CREATEOBJECT = function() {
    return this.getToken(BrightScriptParser.CREATEOBJECT, 0);
};

GlobalFunctionContext.prototype.GETLASTRUNCOMPILEERROR = function() {
    return this.getToken(BrightScriptParser.GETLASTRUNCOMPILEERROR, 0);
};

GlobalFunctionContext.prototype.GETGLOBALAA = function() {
    return this.getToken(BrightScriptParser.GETGLOBALAA, 0);
};

GlobalFunctionContext.prototype.GETLASTRUNRUNTIMEERROR = function() {
    return this.getToken(BrightScriptParser.GETLASTRUNRUNTIMEERROR, 0);
};

GlobalFunctionContext.prototype.STRING = function() {
    return this.getToken(BrightScriptParser.STRING, 0);
};

GlobalFunctionContext.prototype.TAB = function() {
    return this.getToken(BrightScriptParser.TAB, 0);
};

GlobalFunctionContext.prototype.TYPE = function() {
    return this.getToken(BrightScriptParser.TYPE, 0);
};

GlobalFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterGlobalFunction(this);
	}
};

GlobalFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitGlobalFunction(this);
	}
};

GlobalFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitGlobalFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.GlobalFunctionContext = GlobalFunctionContext;

BrightScriptParser.prototype.globalFunction = function() {

    var localctx = new GlobalFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, BrightScriptParser.RULE_globalFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 646;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR))) !== 0) || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (BrightScriptParser.STRING - 49)) | (1 << (BrightScriptParser.TAB - 49)) | (1 << (BrightScriptParser.TYPE - 49)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.OPEN_PARENTHESIS = function() {
    return this.getToken(BrightScriptParser.OPEN_PARENTHESIS, 0);
};

PrimaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryContext.prototype.CLOSE_PARENTHESIS = function() {
    return this.getToken(BrightScriptParser.CLOSE_PARENTHESIS, 0);
};

PrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitPrimary(this);
	}
};

PrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitPrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.PrimaryContext = PrimaryContext;

BrightScriptParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, BrightScriptParser.RULE_primary);
    try {
        this.state = 654;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.OPEN_PARENTHESIS:
            this.enterOuterAlt(localctx, 1);
            this.state = 648;
            this.match(BrightScriptParser.OPEN_PARENTHESIS);
            this.state = 649;
            this.expression(0);
            this.state = 650;
            this.match(BrightScriptParser.CLOSE_PARENTHESIS);
            break;
        case BrightScriptParser.FALSE:
        case BrightScriptParser.INVALID:
        case BrightScriptParser.TRUE:
        case BrightScriptParser.STRING_LITERAL:
        case BrightScriptParser.INT_LITERAL:
        case BrightScriptParser.FLOAT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 652;
            this.literal();
            break;
        case BrightScriptParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 3);
            this.state = 653;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

LiteralContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

LiteralContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

LiteralContext.prototype.invalidLiteral = function() {
    return this.getTypedRuleContext(InvalidLiteralContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.LiteralContext = LiteralContext;

BrightScriptParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, BrightScriptParser.RULE_literal);
    try {
        this.state = 660;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.INT_LITERAL:
        case BrightScriptParser.FLOAT_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 656;
            this.numberLiteral();
            break;
        case BrightScriptParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 657;
            this.stringLiteral();
            break;
        case BrightScriptParser.FALSE:
        case BrightScriptParser.TRUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 658;
            this.booleanLiteral();
            break;
        case BrightScriptParser.INVALID:
            this.enterOuterAlt(localctx, 4);
            this.state = 659;
            this.invalidLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignableExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_assignableExpression;
    return this;
}

AssignableExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignableExpressionContext.prototype.constructor = AssignableExpressionContext;

AssignableExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssignableExpressionContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

AssignableExpressionContext.prototype.associativeArrayInitializer = function() {
    return this.getTypedRuleContext(AssociativeArrayInitializerContext,0);
};

AssignableExpressionContext.prototype.anonymousFunctionDeclaration = function() {
    return this.getTypedRuleContext(AnonymousFunctionDeclarationContext,0);
};

AssignableExpressionContext.prototype.anonymousSubDeclaration = function() {
    return this.getTypedRuleContext(AnonymousSubDeclarationContext,0);
};

AssignableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterAssignableExpression(this);
	}
};

AssignableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitAssignableExpression(this);
	}
};

AssignableExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitAssignableExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.AssignableExpressionContext = AssignableExpressionContext;

BrightScriptParser.prototype.assignableExpression = function() {

    var localctx = new AssignableExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, BrightScriptParser.RULE_assignableExpression);
    try {
        this.state = 667;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.CREATEOBJECT:
        case BrightScriptParser.FALSE:
        case BrightScriptParser.GETGLOBALAA:
        case BrightScriptParser.GETLASTRUNCOMPILEERROR:
        case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
        case BrightScriptParser.INVALID:
        case BrightScriptParser.NOT:
        case BrightScriptParser.STRING:
        case BrightScriptParser.TAB:
        case BrightScriptParser.TRUE:
        case BrightScriptParser.TYPE:
        case BrightScriptParser.STRING_LITERAL:
        case BrightScriptParser.INT_LITERAL:
        case BrightScriptParser.FLOAT_LITERAL:
        case BrightScriptParser.IDENTIFIER:
        case BrightScriptParser.OPEN_PARENTHESIS:
        case BrightScriptParser.ADD:
        case BrightScriptParser.SUBTRACT:
            this.enterOuterAlt(localctx, 1);
            this.state = 662;
            this.expression(0);
            break;
        case BrightScriptParser.OPEN_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 663;
            this.arrayInitializer();
            break;
        case BrightScriptParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 664;
            this.associativeArrayInitializer();
            break;
        case BrightScriptParser.FUNCTION:
            this.enterOuterAlt(localctx, 4);
            this.state = 665;
            this.anonymousFunctionDeclaration();
            break;
        case BrightScriptParser.SUB:
            this.enterOuterAlt(localctx, 5);
            this.state = 666;
            this.anonymousSubDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_numberLiteral;
    return this;
}

NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberLiteralContext.prototype.constructor = NumberLiteralContext;

NumberLiteralContext.prototype.INT_LITERAL = function() {
    return this.getToken(BrightScriptParser.INT_LITERAL, 0);
};

NumberLiteralContext.prototype.FLOAT_LITERAL = function() {
    return this.getToken(BrightScriptParser.FLOAT_LITERAL, 0);
};

NumberLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitNumberLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.NumberLiteralContext = NumberLiteralContext;

BrightScriptParser.prototype.numberLiteral = function() {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, BrightScriptParser.RULE_numberLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 669;
        _la = this._input.LA(1);
        if(!(_la===BrightScriptParser.INT_LITERAL || _la===BrightScriptParser.FLOAT_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.STRING_LITERAL = function() {
    return this.getToken(BrightScriptParser.STRING_LITERAL, 0);
};

StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitStringLiteral(this);
	}
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.StringLiteralContext = StringLiteralContext;

BrightScriptParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, BrightScriptParser.RULE_stringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 671;
        this.match(BrightScriptParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.TRUE = function() {
    return this.getToken(BrightScriptParser.TRUE, 0);
};

BooleanLiteralContext.prototype.FALSE = function() {
    return this.getToken(BrightScriptParser.FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.BooleanLiteralContext = BooleanLiteralContext;

BrightScriptParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, BrightScriptParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 673;
        _la = this._input.LA(1);
        if(!(_la===BrightScriptParser.FALSE || _la===BrightScriptParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InvalidLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_invalidLiteral;
    return this;
}

InvalidLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InvalidLiteralContext.prototype.constructor = InvalidLiteralContext;

InvalidLiteralContext.prototype.INVALID = function() {
    return this.getToken(BrightScriptParser.INVALID, 0);
};

InvalidLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterInvalidLiteral(this);
	}
};

InvalidLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitInvalidLiteral(this);
	}
};

InvalidLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitInvalidLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.InvalidLiteralContext = InvalidLiteralContext;

BrightScriptParser.prototype.invalidLiteral = function() {

    var localctx = new InvalidLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, BrightScriptParser.RULE_invalidLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 675;
        this.match(BrightScriptParser.INVALID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(BrightScriptParser.IDENTIFIER, 0);
};

IdentifierContext.prototype.IDENTIFIER_TYPE_DECLARATION = function() {
    return this.getToken(BrightScriptParser.IDENTIFIER_TYPE_DECLARATION, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IdentifierContext = IdentifierContext;

BrightScriptParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, BrightScriptParser.RULE_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        this.match(BrightScriptParser.IDENTIFIER);
        this.state = 679;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        if(la_===1) {
            this.state = 678;
            this.match(BrightScriptParser.IDENTIFIER_TYPE_DECLARATION);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UntypedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_untypedIdentifier;
    return this;
}

UntypedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UntypedIdentifierContext.prototype.constructor = UntypedIdentifierContext;

UntypedIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(BrightScriptParser.IDENTIFIER, 0);
};

UntypedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterUntypedIdentifier(this);
	}
};

UntypedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitUntypedIdentifier(this);
	}
};

UntypedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitUntypedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.UntypedIdentifierContext = UntypedIdentifierContext;

BrightScriptParser.prototype.untypedIdentifier = function() {

    var localctx = new UntypedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, BrightScriptParser.RULE_untypedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this.match(BrightScriptParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_reservedWord;
    return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.AND = function() {
    return this.getToken(BrightScriptParser.AND, 0);
};

ReservedWordContext.prototype.BOX = function() {
    return this.getToken(BrightScriptParser.BOX, 0);
};

ReservedWordContext.prototype.CREATEOBJECT = function() {
    return this.getToken(BrightScriptParser.CREATEOBJECT, 0);
};

ReservedWordContext.prototype.DIM = function() {
    return this.getToken(BrightScriptParser.DIM, 0);
};

ReservedWordContext.prototype.EACH = function() {
    return this.getToken(BrightScriptParser.EACH, 0);
};

ReservedWordContext.prototype.ELSE = function() {
    return this.getToken(BrightScriptParser.ELSE, 0);
};

ReservedWordContext.prototype.ELSEIF = function() {
    return this.getToken(BrightScriptParser.ELSEIF, 0);
};

ReservedWordContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

ReservedWordContext.prototype.ENDFUNCTION = function() {
    return this.getToken(BrightScriptParser.ENDFUNCTION, 0);
};

ReservedWordContext.prototype.ENDIF = function() {
    return this.getToken(BrightScriptParser.ENDIF, 0);
};

ReservedWordContext.prototype.ENDSUB = function() {
    return this.getToken(BrightScriptParser.ENDSUB, 0);
};

ReservedWordContext.prototype.ENDWHILE = function() {
    return this.getToken(BrightScriptParser.ENDWHILE, 0);
};

ReservedWordContext.prototype.EVAL = function() {
    return this.getToken(BrightScriptParser.EVAL, 0);
};

ReservedWordContext.prototype.EXIT = function() {
    return this.getToken(BrightScriptParser.EXIT, 0);
};

ReservedWordContext.prototype.EXITWHILE = function() {
    return this.getToken(BrightScriptParser.EXITWHILE, 0);
};

ReservedWordContext.prototype.FALSE = function() {
    return this.getToken(BrightScriptParser.FALSE, 0);
};

ReservedWordContext.prototype.FOR = function() {
    return this.getToken(BrightScriptParser.FOR, 0);
};

ReservedWordContext.prototype.FUNCTION = function() {
    return this.getToken(BrightScriptParser.FUNCTION, 0);
};

ReservedWordContext.prototype.GETGLOBALAA = function() {
    return this.getToken(BrightScriptParser.GETGLOBALAA, 0);
};

ReservedWordContext.prototype.GETLASTRUNCOMPILEERROR = function() {
    return this.getToken(BrightScriptParser.GETLASTRUNCOMPILEERROR, 0);
};

ReservedWordContext.prototype.GETLASTRUNRUNTIMEERROR = function() {
    return this.getToken(BrightScriptParser.GETLASTRUNRUNTIMEERROR, 0);
};

ReservedWordContext.prototype.GOTO = function() {
    return this.getToken(BrightScriptParser.GOTO, 0);
};

ReservedWordContext.prototype.IF = function() {
    return this.getToken(BrightScriptParser.IF, 0);
};

ReservedWordContext.prototype.INVALID = function() {
    return this.getToken(BrightScriptParser.INVALID, 0);
};

ReservedWordContext.prototype.LET = function() {
    return this.getToken(BrightScriptParser.LET, 0);
};

ReservedWordContext.prototype.LINE_NUM = function() {
    return this.getToken(BrightScriptParser.LINE_NUM, 0);
};

ReservedWordContext.prototype.NEXT = function() {
    return this.getToken(BrightScriptParser.NEXT, 0);
};

ReservedWordContext.prototype.NOT = function() {
    return this.getToken(BrightScriptParser.NOT, 0);
};

ReservedWordContext.prototype.OBJFUN = function() {
    return this.getToken(BrightScriptParser.OBJFUN, 0);
};

ReservedWordContext.prototype.OR = function() {
    return this.getToken(BrightScriptParser.OR, 0);
};

ReservedWordContext.prototype.POS = function() {
    return this.getToken(BrightScriptParser.POS, 0);
};

ReservedWordContext.prototype.PRINT = function() {
    return this.getToken(BrightScriptParser.PRINT, 0);
};

ReservedWordContext.prototype.REM = function() {
    return this.getToken(BrightScriptParser.REM, 0);
};

ReservedWordContext.prototype.RETURN = function() {
    return this.getToken(BrightScriptParser.RETURN, 0);
};

ReservedWordContext.prototype.RUN = function() {
    return this.getToken(BrightScriptParser.RUN, 0);
};

ReservedWordContext.prototype.STEP = function() {
    return this.getToken(BrightScriptParser.STEP, 0);
};

ReservedWordContext.prototype.STOP = function() {
    return this.getToken(BrightScriptParser.STOP, 0);
};

ReservedWordContext.prototype.SUB = function() {
    return this.getToken(BrightScriptParser.SUB, 0);
};

ReservedWordContext.prototype.TAB = function() {
    return this.getToken(BrightScriptParser.TAB, 0);
};

ReservedWordContext.prototype.THEN = function() {
    return this.getToken(BrightScriptParser.THEN, 0);
};

ReservedWordContext.prototype.TO = function() {
    return this.getToken(BrightScriptParser.TO, 0);
};

ReservedWordContext.prototype.TRUE = function() {
    return this.getToken(BrightScriptParser.TRUE, 0);
};

ReservedWordContext.prototype.TYPE = function() {
    return this.getToken(BrightScriptParser.TYPE, 0);
};

ReservedWordContext.prototype.WHILE = function() {
    return this.getToken(BrightScriptParser.WHILE, 0);
};

ReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterReservedWord(this);
	}
};

ReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitReservedWord(this);
	}
};

ReservedWordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitReservedWord(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ReservedWordContext = ReservedWordContext;

BrightScriptParser.prototype.reservedWord = function() {

    var localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, BrightScriptParser.RULE_reservedWord);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 683;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.AND) | (1 << BrightScriptParser.BOX) | (1 << BrightScriptParser.CREATEOBJECT) | (1 << BrightScriptParser.DIM) | (1 << BrightScriptParser.EACH) | (1 << BrightScriptParser.ELSE) | (1 << BrightScriptParser.ELSEIF) | (1 << BrightScriptParser.END) | (1 << BrightScriptParser.ENDFUNCTION) | (1 << BrightScriptParser.ENDIF) | (1 << BrightScriptParser.ENDSUB) | (1 << BrightScriptParser.ENDWHILE) | (1 << BrightScriptParser.EXIT) | (1 << BrightScriptParser.EXITWHILE) | (1 << BrightScriptParser.EVAL) | (1 << BrightScriptParser.FALSE) | (1 << BrightScriptParser.FOR) | (1 << BrightScriptParser.FUNCTION) | (1 << BrightScriptParser.GETGLOBALAA) | (1 << BrightScriptParser.GETLASTRUNCOMPILEERROR) | (1 << BrightScriptParser.GETLASTRUNRUNTIMEERROR) | (1 << BrightScriptParser.GOTO) | (1 << BrightScriptParser.IF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (BrightScriptParser.INVALID - 32)) | (1 << (BrightScriptParser.LET - 32)) | (1 << (BrightScriptParser.LINE_NUM - 32)) | (1 << (BrightScriptParser.NEXT - 32)) | (1 << (BrightScriptParser.NOT - 32)) | (1 << (BrightScriptParser.OBJFUN - 32)) | (1 << (BrightScriptParser.OR - 32)) | (1 << (BrightScriptParser.POS - 32)) | (1 << (BrightScriptParser.PRINT - 32)) | (1 << (BrightScriptParser.REM - 32)) | (1 << (BrightScriptParser.RETURN - 32)) | (1 << (BrightScriptParser.RUN - 32)) | (1 << (BrightScriptParser.STEP - 32)) | (1 << (BrightScriptParser.STOP - 32)) | (1 << (BrightScriptParser.SUB - 32)) | (1 << (BrightScriptParser.TAB - 32)) | (1 << (BrightScriptParser.THEN - 32)) | (1 << (BrightScriptParser.TO - 32)) | (1 << (BrightScriptParser.TRUE - 32)) | (1 << (BrightScriptParser.TYPE - 32)) | (1 << (BrightScriptParser.WHILE - 32)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_comment;
    return this;
}

CommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentContext.prototype.constructor = CommentContext;

CommentContext.prototype.COMMENT = function() {
    return this.getToken(BrightScriptParser.COMMENT, 0);
};

CommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterComment(this);
	}
};

CommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitComment(this);
	}
};

CommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.CommentContext = CommentContext;

BrightScriptParser.prototype.comment = function() {

    var localctx = new CommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, BrightScriptParser.RULE_comment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this.match(BrightScriptParser.COMMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndOfLineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_endOfLine;
    return this;
}

EndOfLineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndOfLineContext.prototype.constructor = EndOfLineContext;

EndOfLineContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.NEWLINE);
    } else {
        return this.getToken(BrightScriptParser.NEWLINE, i);
    }
};


EndOfLineContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};

EndOfLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterEndOfLine(this);
	}
};

EndOfLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitEndOfLine(this);
	}
};

EndOfLineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitEndOfLine(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.EndOfLineContext = EndOfLineContext;

BrightScriptParser.prototype.endOfLine = function() {

    var localctx = new EndOfLineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, BrightScriptParser.RULE_endOfLine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.NEWLINE:
            this.state = 687;
            this.match(BrightScriptParser.NEWLINE);
            break;
        case BrightScriptParser.COMMENT:
            this.state = 688;
            this.comment();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 694;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 691;
                this.match(BrightScriptParser.NEWLINE); 
            }
            this.state = 696;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndOfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_endOfStatement;
    return this;
}

EndOfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndOfStatementContext.prototype.constructor = EndOfStatementContext;

EndOfStatementContext.prototype.endOfLine = function() {
    return this.getTypedRuleContext(EndOfLineContext,0);
};

EndOfStatementContext.prototype.COLON = function() {
    return this.getToken(BrightScriptParser.COLON, 0);
};

EndOfStatementContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.NEWLINE);
    } else {
        return this.getToken(BrightScriptParser.NEWLINE, i);
    }
};


EndOfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterEndOfStatement(this);
	}
};

EndOfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitEndOfStatement(this);
	}
};

EndOfStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitEndOfStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.EndOfStatementContext = EndOfStatementContext;

BrightScriptParser.prototype.endOfStatement = function() {

    var localctx = new EndOfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, BrightScriptParser.RULE_endOfStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 699;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.COMMENT:
        case BrightScriptParser.NEWLINE:
            this.state = 697;
            this.endOfLine();
            break;
        case BrightScriptParser.COLON:
            this.state = 698;
            this.match(BrightScriptParser.COLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 704;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,98,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 701;
                this.match(BrightScriptParser.NEWLINE); 
            }
            this.state = 706;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,98,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


BrightScriptParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 34:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

BrightScriptParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 7);
		case 1:
			return this.precpred(this._ctx, 6);
		case 2:
			return this.precpred(this._ctx, 5);
		case 3:
			return this.precpred(this._ctx, 4);
		case 4:
			return this.precpred(this._ctx, 2);
		case 5:
			return this.precpred(this._ctx, 12);
		case 6:
			return this.precpred(this._ctx, 11);
		case 7:
			return this.precpred(this._ctx, 10);
		case 8:
			return this.precpred(this._ctx, 8);
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.BrightScriptParser = BrightScriptParser;
